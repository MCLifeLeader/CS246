From: <Saved by Windows Internet Explorer 7>
Subject: The List Interface
Date: Mon, 29 May 2006 10:21:54 -0600
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_009A_01C68309.B57B7870"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2869

This is a multi-part message in MIME format.

------=_NextPart_000_009A_01C68309.B57B7870
Content-Type: text/html;
	charset="Windows-1252"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://java.sun.com/docs/books/tutorial/collections/interfaces/list.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>The List Interface</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dwindows-1252">
<SCRIPT language=3DJavaScript>=0A=
<!-- hide=0A=
function openWin(term) {=0A=
  url=3D"../../information/glossary.html#" + term;=0A=
  myWin=3D window.open(url, "Glossary",=0A=
              =
"width=3D400,height=3D150,scrollbars=3Dyes,status=3Dno,toolbar=3Dno,menub=
ar=3Dno");=0A=
  myWin.focus();=0A=
}=0A=
//-->=0A=
</SCRIPT>

<STYLE type=3Dtext/css>.FigureCaption {
	FONT-SIZE: smaller; MARGIN-LEFT: 1in; MARGIN-RIGHT: 1in; FONT-FAMILY: =
Arial, Helvetica, sans-serif; TEXT-ALIGN: justify
}
</STYLE>

<META content=3D"MSHTML 6.00.5346.5" name=3DGENERATOR></HEAD>
<BODY link=3D#000099 bgColor=3D#ffffff><B><FONT size=3D-1>The =
Java</FONT><SUP><FONT=20
size=3D-2>TM</FONT></SUP> <FONT size=3D-1>Tutorial</FONT></B> <BR>
<TABLE width=3D550 summary=3Dlayout>
  <TBODY>
  <TR>
    <TD vAlign=3Dcenter align=3Dleft><A=20
      =
href=3D"http://java.sun.com/docs/books/tutorial/collections/interfaces/se=
t.html"=20
      target=3D_top><IMG height=3D26 alt=3D"Previous Page"=20
      =
src=3D"http://java.sun.com/docs/books/tutorial/images/PreviousArrow.gif" =

      width=3D26 align=3Dmiddle border=3D0></A> <A=20
      =
href=3D"http://java.sun.com/docs/books/tutorial/collections/TOC.html#inte=
rfaces"=20
      target=3D_top><IMG height=3D26 alt=3D"Lesson Contents"=20
      src=3D"http://java.sun.com/docs/books/tutorial/images/TOCIcon.gif" =
width=3D26=20
      align=3Dmiddle border=3D0></A> <A=20
      =
href=3D"http://java.sun.com/docs/books/tutorial/collections/interfaces/qu=
eue.html"=20
      target=3D_top><IMG height=3D26 alt=3D"Next Page"=20
      =
src=3D"http://java.sun.com/docs/books/tutorial/images/NextArrow.gif"=20
      width=3D26 align=3Dmiddle border=3D0></A></TD>
    <TD vAlign=3Dcenter align=3Dmiddle><FONT size=3D-1><A=20
      href=3D"http://java.sun.com/docs/books/tutorial/index.html"=20
      target=3D_top>Start of Tutorial</A> &gt; <A=20
      =
href=3D"http://java.sun.com/docs/books/tutorial/collections/index.html"=20
      target=3D_top>Start of Trail</A> &gt; <A=20
      =
href=3D"http://java.sun.com/docs/books/tutorial/collections/interfaces/in=
dex.html"=20
      target=3D_top>Start of Lesson</A> </FONT></TD>
    <TD vAlign=3Dcenter align=3Dright><FONT size=3D-1><A=20
      href=3D"http://java.sun.com/docs/books/tutorial/search.html"=20
      target=3D_top>Search</A> <BR><A=20
      =
href=3D"http://developer.sun.com/contact/tutorial_feedback.jsp">Feedback =

      Form</A> </FONT></TD></TR></TBODY></TABLE><IMG height=3D8 alt=3D"" =

src=3D"http://java.sun.com/docs/books/tutorial/images/blueline.gif" =
width=3D550=20
align=3Dbottom> <BR><FONT size=3D-1><B>Trail</B>: Collections =
<BR><B>Lesson</B>:=20
Interfaces </FONT>
<H2>The List Interface </H2>
<BLOCKQUOTE>A <A=20
  href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/List.html"=20
  target=3D_blank><FONT color=3D#8800bb><CODE>List</CODE></FONT></A><A=20
  href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/List.html"=20
  target=3D_blank><IMG height=3D11 alt=3D" (in the API reference =
documentation)"=20
  src=3D"http://java.sun.com/docs/books/tutorial/images/apiIcon.gif" =
width=3D11=20
  align=3Dmiddle border=3D0></A> is an ordered <A=20
  =
href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/Collection.html" =

  target=3D_blank><FONT =
color=3D#8800bb><CODE>Collection</CODE></FONT></A><A=20
  =
href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/Collection.html" =

  target=3D_blank><IMG height=3D11 alt=3D" (in the API reference =
documentation)"=20
  src=3D"http://java.sun.com/docs/books/tutorial/images/apiIcon.gif" =
width=3D11=20
  align=3Dmiddle border=3D0></A> (sometimes called a <I>sequence</I>). =
Lists may=20
  contain duplicate elements. In addition to the operations inherited =
from=20
  <CODE>Collection</CODE>, the <CODE>List</CODE> interface includes =
operations=20
  for the following:=20
  <UL>
    <LI><CODE>Positional access</CODE> =97 manipulates elements based on =
their=20
    numerical position in the list=20
    <LI><CODE>Search</CODE> =97 searches for a specified object in the =
list and=20
    returns its numerical position=20
    <LI><CODE>Iteration</CODE> =97 extends <CODE>Iterator</CODE> =
semantics to take=20
    advantage of the list's sequential nature=20
    <LI><CODE>Range-view</CODE> =97 performs arbitrary <I>range =
operations</I> on=20
    the list. </LI></UL>
  <P>The <CODE>List</CODE> interface follows.=20
  <BLOCKQUOTE><PRE>public interface List&lt;E&gt; extends =
Collection&lt;E&gt; {
    //Positional access
    E get(int index);
    E set(int index, E element);    //optional
    boolean add(E element);         //optional
    void add(int index, E element); //optional
    E remove(int index);            //optional
    abstract boolean addAll(int index,=20
        Collection&lt;? extends E&gt; c);  //optional

    //Search
    int indexOf(Object o);
    int lastIndexOf(Object o);

    //Iteration
    ListIterator&lt;E&gt; listIterator();
    ListIterator&lt;E&gt; listIterator(int index);

    //Range-view
    List&lt;E&gt; subList(int from, int to);
}
</PRE></BLOCKQUOTE>The Java platform contains two general-purpose=20
  <CODE>List</CODE> implementations. <A=20
  =
href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/ArrayList.html"=20
  target=3D_blank><FONT =
color=3D#8800bb><CODE>ArrayList</CODE></FONT></A><A=20
  =
href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/ArrayList.html"=20
  target=3D_blank><IMG height=3D11 alt=3D" (in the API reference =
documentation)"=20
  src=3D"http://java.sun.com/docs/books/tutorial/images/apiIcon.gif" =
width=3D11=20
  align=3Dmiddle border=3D0></A>, which is usually the better-performing =

  implementation, and <A=20
  =
href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/LinkedList.html" =

  target=3D_blank><FONT =
color=3D#8800bb><CODE>LinkedList</CODE></FONT></A><A=20
  =
href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/LinkedList.html" =

  target=3D_blank><IMG height=3D11 alt=3D" (in the API reference =
documentation)"=20
  src=3D"http://java.sun.com/docs/books/tutorial/images/apiIcon.gif" =
width=3D11=20
  align=3Dmiddle border=3D0></A> which offers better performance under =
certain=20
  circumstances. Also, <CODE>Vector</CODE> has been retrofitted to =
implement=20
  <CODE>List</CODE>. </BLOCKQUOTE>
<H3 fmstyle=3D"C-Head">Comparison to Vector</H3>
<BLOCKQUOTE>If you've used <A=20
  href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/Vector.html"=20
  target=3D_blank><FONT color=3D#8800bb><CODE>Vector</CODE></FONT></A><A =

  href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/Vector.html"=20
  target=3D_blank><IMG height=3D11 alt=3D" (in the API reference =
documentation)"=20
  src=3D"http://java.sun.com/docs/books/tutorial/images/apiIcon.gif" =
width=3D11=20
  align=3Dmiddle border=3D0></A>, you're already familiar with the =
general basics of=20
  <CODE>List</CODE>. (Of course, <CODE>List</CODE> is an interface, =
while=20
  <CODE>Vector</CODE> is a concrete implementation.) <CODE>List</CODE> =
fixes=20
  several minor API deficiencies in <CODE>Vector</CODE>. Commonly used=20
  <CODE>Vector</CODE> operations, such as <CODE>elementAt</CODE> and=20
  <CODE>setElementAt</CODE>, have been given much shorter names. When =
you=20
  consider that these two operations are the <CODE>List</CODE> analogue =
of=20
  square brackets for arrays, it becomes apparent that shorter names are =
highly=20
  desirable. Consider the following assignment statement.=20
  <BLOCKQUOTE><PRE>a[i] =3D a[j].times(a[k]);
</PRE></BLOCKQUOTE>The <CODE>Vector</CODE> equivalent is:=20
  <BLOCKQUOTE><PRE>v.setElementAt(v.elementAt(j).times(v.elementAt(k)), =
i);
</PRE></BLOCKQUOTE>The <CODE>List</CODE> equivalent is:=20
  <BLOCKQUOTE><PRE>v.set(i, v.get(j).times(v.get(k)));
</PRE></BLOCKQUOTE>You may already have noticed that the =
<CODE>set</CODE>=20
  method, which replaces the <CODE>Vector</CODE> method=20
  <CODE>setElementAt</CODE>, reverses the order of the arguments so that =
they=20
  match the corresponding array operation. Consider the following =
assignment=20
  statement.=20
  <BLOCKQUOTE><PRE>gift[5] =3D "golden rings";
</PRE></BLOCKQUOTE>The <CODE>Vector</CODE> equivalent is:=20
  <BLOCKQUOTE><PRE>gift.setElementAt("golden rings", 5);
</PRE></BLOCKQUOTE>The <CODE>List</CODE> equivalent is:=20
  <BLOCKQUOTE><PRE>gift.set(5, "golden rings");
</PRE></BLOCKQUOTE>For consistency's sake, the method <CODE>add(int,=20
  E)</CODE>, which replaces <CODE>insertElementAt(Object, int)</CODE>, =
also=20
  reverses the order of the arguments.=20
  <P>The various range operations in <CODE>Vector</CODE> =
(<CODE>indexOf</CODE>,=20
  <CODE>lastIndexOf</CODE>(<CODE>setSize</CODE>) have been replaced by a =
single=20
  range-view operation (<CODE>subList</CODE>), which is far more =
powerful and=20
  consistent. </P></BLOCKQUOTE>
<H3 fmstyle=3D"C-Head">Collection Operations</H3>
<BLOCKQUOTE>The operations inherited from <CODE>Collection</CODE> all do =
about=20
  what you'd expect them to do, assuming you're already familiar with =
them. If=20
  you're not familiar with them from <CODE>Collection</CODE>, now would =
be a=20
  good time to read <A=20
  =
href=3D"http://java.sun.com/docs/books/tutorial/collections/interfaces/co=
llection.html"=20
  target=3D_top>The Collection Interface</A><A=20
  =
href=3D"http://java.sun.com/docs/books/tutorial/collections/interfaces/co=
llection.html"=20
  target=3D_top><IMG height=3D11 alt=3D" (in the Collections trail)"=20
  =
src=3D"http://java.sun.com/docs/books/tutorial/images/tutorialIcon.gif" =
width=3D11=20
  align=3Dmiddle border=3D0></A> section. The <CODE>remove</CODE> =
operation always=20
  removes <I>the first</I> occurrence of the specified element from the =
list.=20
  The <CODE>add</CODE> and <CODE>addAll</CODE> operations always append =
the new=20
  element(s) to the <I>end</I> of the list. Thus, the following idiom=20
  concatenates one list to another.=20
  <BLOCKQUOTE><PRE>list1.addAll(list2);
</PRE></BLOCKQUOTE>Here's a nondestructive form of this idiom, which =
produces=20
  a third <CODE>List</CODE> consisting of the second list appended to =
the first.=20

  <BLOCKQUOTE><PRE>List&lt;Type&gt; list3 =3D new =
ArrayList&lt;Type&gt;(list1);
list3.addAll(list2);
</PRE></BLOCKQUOTE>Note that the idiom, in its nondestructive form, =
takes=20
  advantage of <CODE>ArrayList</CODE>'s standard conversion constructor. =

  <P>Like the <A =
href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/Set.html"=20
  target=3D_blank><FONT color=3D#8800bb><CODE>Set</CODE></FONT></A><A=20
  href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/Set.html"=20
  target=3D_blank><IMG height=3D11 alt=3D" (in the API reference =
documentation)"=20
  src=3D"http://java.sun.com/docs/books/tutorial/images/apiIcon.gif" =
width=3D11=20
  align=3Dmiddle border=3D0></A> interface, <CODE>List</CODE> =
strengthens the=20
  requirements on the <CODE>equals</CODE> and <CODE>hashCode</CODE> =
methods so=20
  that two <CODE>List</CODE> objects can be compared for logical =
equality=20
  without regard to their implementation classes. Two <CODE>List</CODE> =
objects=20
  are equal if they contain the same elements in the same order. =
</P></BLOCKQUOTE>
<H3 fmstyle=3D"C-Head">Positional Access and Search Operations</H3>
<BLOCKQUOTE>The basic <CODE>positional access</CODE> operations=20
  (<CODE>get</CODE>, <CODE>set</CODE>, <CODE>add</CODE> and =
<CODE>remove</CODE>)=20
  behave just like their longer-named counterparts in =
<CODE>Vector</CODE>=20
  (<CODE>elementAt</CODE>, <CODE>setElementAt</CODE>,=20
  <CODE>insertElementAt</CODE>, and <CODE>removeElementAt</CODE>) with =
one=20
  noteworthy exception. The <CODE>set</CODE> and <CODE>remove</CODE> =
operations=20
  return the old value that is being overwritten or removed; the=20
  <CODE>Vector</CODE> counterparts (<CODE>setElementAt</CODE> and=20
  <CODE>removeElementAt</CODE>) return nothing (<CODE>void</CODE>). The=20
  <CODE>search</CODE> operations <CODE>indexOf</CODE> and=20
  <CODE>lastIndexOf</CODE> behave exactly like the identically named =
operations=20
  in <CODE>Vector</CODE>.=20
  <P>The <CODE>addAll</CODE> operation inserts all the elements of the =
specified=20
  <CODE>Collection</CODE> starting at the specified position. The =
elements are=20
  inserted in the order they are returned by the specified=20
  <CODE>Collection</CODE>'s iterator. This call is the positional access =

  analogue of <CODE>Collection</CODE>'s <CODE>addAll</CODE> operation.=20
  <P>Here's a little method to swap two indexed values in a =
<CODE>List</CODE>.=20
  It should look familiar from Programming 101.=20
  <BLOCKQUOTE><PRE>public static &lt;E&gt; void swap(List&lt;E&gt; a, =
int i, int j) {
    E tmp =3D a.get(i);
    a.set(i, a.get(j));
    a.set(j, tmp);
}
</PRE></BLOCKQUOTE><A name=3Dshuffle>Of course there's one big =
difference.</A>=20
  This is a polymorphic algorithm: It swaps two elements in any=20
  <CODE>List</CODE>, regardless of its implementation type. Here's =
another=20
  polymorphic algorithm that uses the preceding <CODE>swap</CODE> =
method.=20
  <BLOCKQUOTE><PRE>public static void shuffle(List&lt;?&gt; list, Random =
rnd) {
    for (int i =3D list.size(); i &gt; 1; i--)
        swap(list, i - 1, rnd.nextInt(i));
}
</PRE></BLOCKQUOTE>This algorithm, which is included in the Java =
platform's <A=20
  =
href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/Collections.html"=
=20
  target=3D_blank><FONT =
color=3D#8800bb><CODE>Collections</CODE></FONT></A><A=20
  =
href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/Collections.html"=
=20
  target=3D_blank><IMG height=3D11 alt=3D" (in the API reference =
documentation)"=20
  src=3D"http://java.sun.com/docs/books/tutorial/images/apiIcon.gif" =
width=3D11=20
  align=3Dmiddle border=3D0></A> class, randomly permutes the specified =
list using=20
  the specified source of randomness. It's a bit subtle: It runs up the =
list=20
  from the bottom, repeatedly swapping a randomly selected element into =
the=20
  current position. Unlike most naive attempts at shuffling, it's =
<I>fair</I>=20
  (all permutations occur with equal likelihood, assuming an unbiased =
source of=20
  randomness) and <I>fast</I> (requiring exactly =
<CODE>list.size()-1</CODE>=20
  swaps). The following program uses this algorithm to print the words =
in its=20
  argument list in random order.=20
  <BLOCKQUOTE><PRE>import java.util.*;
public class Shuffle {
    public static void main(String args[]) {
        List&lt;String&gt; list =3D new ArrayList&lt;String&gt;();
        for (String a : args)=20
            list.add(a);
        Collections.shuffle(list, new Random());
        System.out.println(list);
    }
}
</PRE></BLOCKQUOTE>In fact, this program can be made even shorter and =
faster.=20
  The <A =
href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/Arrays.html"=20
  target=3D_blank><FONT color=3D#8800bb><CODE>Arrays</CODE></FONT></A><A =

  href=3D"http://java.sun.com/j2se/5.0/docs/api/java/util/Arrays.html"=20
  target=3D_blank><IMG height=3D11 alt=3D" (in the API reference =
documentation)"=20
  src=3D"http://java.sun.com/docs/books/tutorial/images/apiIcon.gif" =
width=3D11=20
  align=3Dmiddle border=3D0></A> class has a static factory method =
called=20
  <CODE>asList</CODE>, which allows an array to be viewed as a=20
  <CODE>List</CODE>. This method does not copy the array. Changes in the =

  <CODE>List</CODE> write through to the array and vice-versa. The =
resulting=20
  List is not a general-purpose <CODE>List</CODE> implementation, in =
that it=20
  doesn't implement the (optional) <CODE>add</CODE> and =
<CODE>remove</CODE>=20
  operations: Arrays are not resizable. Taking advantage of=20
  <CODE>Arrays.asList</CODE> and calling the library version of=20
  <CODE>shuffle</CODE>, which uses a default source of randomness, you =
get the=20
  following <A=20
  =
href=3D"http://java.sun.com/docs/books/tutorial/collections/interfaces/ex=
5/Shuffle.java"=20
  target=3D_blank><FONT color=3D#bb000f><CODE>tiny =
program</CODE></FONT></A><A=20
  =
href=3D"http://java.sun.com/docs/books/tutorial/collections/interfaces/ex=
5/Shuffle.java"=20
  target=3D_blank><IMG height=3D11 alt=3D" (in a .java source file)"=20
  src=3D"http://java.sun.com/docs/books/tutorial/images/sourceIcon.gif" =
width=3D11=20
  align=3Dmiddle border=3D0></A> whose behavior is identical to the =
previous=20
  program.=20
  <BLOCKQUOTE><PRE>import java.util.*;
public class Shuffle {
    public static void main(String args[]) {
        List&lt;String&gt; list =3D Arrays.asList(args);
        Collections.shuffle(list);
        System.out.println(list);
    }
}
</PRE></BLOCKQUOTE></BLOCKQUOTE><A name=3DIterator>
<H3 fmstyle=3D"C-Head">Iterators</H3></A>
<BLOCKQUOTE>As you'd expect, the <CODE>Iterator</CODE> returned by=20
  <CODE>List</CODE>'s <CODE>iterator</CODE> operation returns the =
elements of=20
  the list in proper sequence. <CODE>List</CODE> also provides a richer=20
  iterator, called a <CODE>ListIterator</CODE>, which allows you to =
traverse the=20
  list in either direction, modify the list during iteration, and obtain =
the=20
  current position of the iterator. The <CODE>ListIterator</CODE> =
interface=20
  follows.=20
  <BLOCKQUOTE><PRE>public interface ListIterator&lt;E&gt; extends =
Iterator&lt;E&gt; {
    boolean hasNext();
    E next();
    boolean hasPrevious();
    E previous();
    int nextIndex();
    int previousIndex();
    void remove(); //optional
    void set(E o); //optional
    void add(E o); //optional
}
</PRE></BLOCKQUOTE>The three methods that <CODE>ListIterator</CODE> =
inherits=20
  from <CODE>Iterator</CODE> (<CODE>hasNext</CODE>, <CODE>next</CODE>, =
and=20
  <CODE>remove</CODE>) do exactly the same thing in both interfaces. The =

  <CODE>hasPrevious</CODE> and the <CODE>previous</CODE> operations are =
exact=20
  analogues of <CODE>hasNext</CODE> and <CODE>next</CODE>. The former =
operations=20
  refer to the element before the (implicit) cursor, whereas the latter =
refer to=20
  the element after the cursor. The <CODE>previous</CODE> operation =
moves the=20
  cursor backward, whereas <CODE>next</CODE> moves it forward.=20
  <P>Here's the standard idiom for iterating backward through a list.=20
  <BLOCKQUOTE><PRE>for (ListIterator&lt;Type&gt; i =3D =
list.listIterator(list.size());
     i.hasPrevious(); ) {
    Type t =3D i.previous();
    ...
}
</PRE></BLOCKQUOTE>Note the argument to <CODE>listIterator</CODE> in the =

  preceding idiom. The <CODE>List</CODE> interface has two forms of the=20
  <CODE>listIterator</CODE> method. The form with no arguments returns a =

  <CODE>ListIterator</CODE> positioned at the beginning of the list; the =
form=20
  with an <CODE>int</CODE> argument returns a <CODE>ListIterator</CODE>=20
  positioned at the specified index. The index refers to the element =
that would=20
  be returned by an initial call to <CODE>next</CODE>. An initial call =
to=20
  <CODE>previous</CODE> would return the element whose index was=20
  <CODE>index-1</CODE>. In a list of length <CODE>n</CODE>, there are=20
  <CODE>n+1</CODE> valid values for <CODE>index</CODE>, from =
<CODE>0</CODE> to=20
  <CODE>n</CODE>, inclusive.=20
  <P>Intuitively speaking, the cursor is always between two elements =97 =
the one=20
  that would be returned by a call to <CODE>previous</CODE> and the one =
that=20
  would be returned by a call to <CODE>next</CODE>. The <CODE>n+1</CODE> =
valid=20
  <CODE>index</CODE> values correspond to the <CODE>n+1</CODE> gaps =
between=20
  elements, from the gap before the first element to the gap after the =
last one.=20
  <SPAN id=3Dfigure:colls-fivePossibleCursor.gif>The following =
figure</SPAN> shows=20
  the five possible cursor positions in a list containing four elements. =

  <CENTER>
  <P><IMG height=3D67=20
  alt=3D"Five arrows representing five cursor positions, from 0 to 4, =
with four elements, one between each arrow."=20
  =
src=3D"http://java.sun.com/docs/books/tutorial/figures/collections/colls-=
fivePossibleCursor.gif"=20
  width=3D367 align=3Dbottom></P>
  <P class=3DFigureCaption>The five possible cursor =
positions.</P></CENTER>Calls=20
  to <CODE>next</CODE> and <CODE>previous</CODE> can be intermixed, but =
you have=20
  to be a bit careful. The first call to <CODE>previous</CODE> returns =
the same=20
  element as the last call to <CODE>next</CODE>. Similarly, the first =
call to=20
  <CODE>next</CODE> after a sequence of calls to <CODE>previous</CODE> =
returns=20
  the same element as the last call to <CODE>previous</CODE>.=20
  <P>It should come as no surprise that the <CODE>nextIndex</CODE> =
method=20
  returns the index of the element that would be returned by a =
subsequent call=20
  to <CODE>next</CODE>, and <CODE>previousIndex</CODE> returns the index =
of the=20
  element that would be returned by a subsequent call to =
<CODE>previous</CODE>.=20
  These calls are typically used either to report the position where =
something=20
  was found or to record the position of the <CODE>ListIterator</CODE> =
so that=20
  another <CODE>ListIterator</CODE> with identical position can be =
created.=20
  <P>It should also come as no surprise that the number returned by=20
  <CODE>nextIndex</CODE> is always one greater than the number returned =
by=20
  <CODE>previousIndex</CODE>. This implies the behavior of the two =
boundary=20
  cases: (1) a call to <CODE>previousIndex</CODE> when the cursor is =
before the=20
  initial element returns <CODE>-1</CODE> and (2) a call to=20
  <CODE>nextIndex</CODE> when the cursor is after the final element =
returns=20
  <CODE>list.size()</CODE>. To make all this concrete, the following is =
a=20
  possible implementation of <CODE>List.indexOf</CODE>.=20
  <BLOCKQUOTE><PRE>public int indexOf(E o) {
    for (ListIterator&lt;E&gt; i =3D listIterator(); i.hasNext(); )
        if (o=3D=3Dnull ? i.next()=3D=3Dnull : o.equals(i.next()))
            return i.previousIndex();
    return -1; //Object not found.
}
</PRE></BLOCKQUOTE>Note that the <CODE>indexOf</CODE> method returns=20
  <CODE>i.previousIndex()</CODE> though it is traversing the list in the =
forward=20
  direction. The reason is that <CODE>i.nextIndex()</CODE> would return =
the=20
  index of the element we are about to examine, and we want to return =
the index=20
  of the element we just examined.=20
  <P>The <CODE>Iterator</CODE> interface provides the =
<CODE>remove</CODE>=20
  operation to remove the last element returned by <CODE>next</CODE> =
from the=20
  <CODE>Collection</CODE>. For <CODE>ListIterator</CODE>, this operation =
removes=20
  the last element returned by <CODE>next</CODE> or =
<CODE>previous</CODE>. The=20
  <CODE>ListIterator</CODE> interface provides two additional operations =
to=20
  modify the list =97 <CODE>set</CODE> and <CODE>add</CODE>. The =
<CODE>set</CODE>=20
  method overwrites the last element returned by <CODE>next</CODE> or=20
  <CODE>previous</CODE> with the specified element. The following =
polymorphic=20
  algorithm uses <CODE>set</CODE> to replace all occurrences of one =
specified=20
  value with another.=20
  <BLOCKQUOTE><PRE>public static &lt;E&gt; void replace(List&lt;E&gt; s, =
E val, E newVal) {
   for (ListIterator&lt;E&gt; i =3D s.listIterator(); i.hasNext(); )
      if (val=3D=3Dnull ? i.next()=3D=3Dnull : val.equals(i.next()))
         i.set(newVal);
}
</PRE></BLOCKQUOTE>The only bit of trickiness in this example is the =
equality=20
  test between <CODE>val</CODE> and <CODE>i.next</CODE>. You need to=20
  special-case a <CODE>val</CODE> value of <CODE>null</CODE> to prevent =
a=20
  <CODE>NullPointerException</CODE>.=20
  <P>The <CODE>add</CODE> method inserts a new element into the list =
immediately=20
  before the current cursor position. This method is illustrated in the=20
  following polymorphic algorithm to replace all occurrences of a =
specified=20
  value with the sequence of values contained in the specified list.=20
  <BLOCKQUOTE><PRE>public static &lt;E&gt; void replace(List&lt;E&gt; s, =
E val,
                               List&lt;E&gt; newVals) {
  for (ListIterator&lt;E&gt; i =3D s.listIterator(); i.hasNext(); ){
    if (val=3D=3Dnull ? i.next()=3D=3Dnull : val.equals(i.next())) {
      i.remove();
      for (E e : newVals)
        i.add(e);
    }
  }
}
</PRE></BLOCKQUOTE></BLOCKQUOTE>
<H3 fmstyle=3D"C-Head">Range-View Operation</H3>
<BLOCKQUOTE>The <CODE>range-view</CODE> operation, <CODE>subList(int=20
  fromIndex, int toIndex)</CODE>, returns a <CODE>List</CODE> view of =
the=20
  portion of this list whose indices range from <CODE>fromIndex</CODE>,=20
  inclusive, to <CODE>toIndex</CODE>, exclusive. This <I>half-open =
range</I>=20
  mirrors the typical <CODE>for</CODE> loop.=20
  <BLOCKQUOTE><PRE>for (int i =3D fromIndex; i &lt; toIndex; i++) {
    ...
}
</PRE></BLOCKQUOTE>As the term <I>view</I> implies, the returned=20
  <CODE>List</CODE> is backed up by the <CODE>List</CODE> on which=20
  <CODE>subList</CODE> was called, so changes in the former are =
reflected in the=20
  latter.=20
  <P>This method eliminates the need for explicit range operations (of =
the sort=20
  that commonly exist for arrays). Any operation that expects a=20
  <CODE>List</CODE> can be used as a range operation by passing a=20
  <CODE>subList</CODE> view instead of a whole <CODE>List</CODE>. For =
example,=20
  the following idiom removes a range of elements from a =
<CODE>List</CODE>.=20
  <BLOCKQUOTE><PRE>list.subList(fromIndex, toIndex).clear();
</PRE></BLOCKQUOTE>Similar idioms can be constructed to search for an =
element=20
  in a range.=20
  <BLOCKQUOTE><PRE>int i =3D list.subList(fromIndex, =
toIndex).indexOf(o);
int j =3D list.subList(fromIndex, toIndex).lastIndexOf(o);
</PRE></BLOCKQUOTE>Note that the preceding idioms return the index of =
the=20
  found element in the <CODE>subList</CODE>, not the index in the =
backing=20
  <CODE>List</CODE>.=20
  <P>Any polymorphic algorithm that operates on a <CODE>List</CODE>, =
such as the=20
  <CODE>replace</CODE> and <CODE>shuffle</CODE> examples, works with the =

  <CODE>List</CODE> returned by <CODE>subList</CODE>.=20
  <P>Here's a polymorphic algorithm whose implementation uses=20
  <CODE>subList</CODE> to deal a hand from a deck. That is, it returns a =
new=20
  <CODE>List</CODE> (the "hand") containing the specified number of =
elements=20
  taken from the end of the specified <CODE>List</CODE> (the "deck"). =
The=20
  elements returned in the hand are removed from the deck.=20
  <BLOCKQUOTE><PRE>public static &lt;E&gt; List&lt;E&gt; =
dealHand(List&lt;E&gt; deck, int n) {
    int deckSize =3D deck.size();
    List&lt;E&gt; handView =3D deck.subList(deckSize - n, deckSize);
    List&lt;E&gt; hand =3D new ArrayList&lt;E&gt;(handView);
    handView.clear();
    return hand;
}
</PRE></BLOCKQUOTE>Note that this algorithm removes the hand from the=20
  <I>end</I> of the deck. For many common <CODE>List</CODE> =
implementations,=20
  such as <CODE>ArrayList</CODE>, the performance of removing elements =
from the=20
  end of the list is substantially better than that of removing elements =
from=20
  the beginning.=20
  <P>The following is <A=20
  =
href=3D"http://java.sun.com/docs/books/tutorial/collections/interfaces/ex=
5/Deal.java"=20
  target=3D_blank><FONT color=3D#bb000f><CODE>a =
program</CODE></FONT></A><A=20
  =
href=3D"http://java.sun.com/docs/books/tutorial/collections/interfaces/ex=
5/Deal.java"=20
  target=3D_blank><IMG height=3D11 alt=3D" (in a .java source file)"=20
  src=3D"http://java.sun.com/docs/books/tutorial/images/sourceIcon.gif" =
width=3D11=20
  align=3Dmiddle border=3D0></A> that uses the <CODE>dealHand</CODE> =
method in=20
  combination with <CODE>Collections.shuffle</CODE> to generate hands =
from a=20
  normal 52-card deck. The program takes two command-line arguments: =
(1)the=20
  number of hands to deal and (2) the number of cards in each hand.=20
  <BLOCKQUOTE><PRE>import java.util.*;

class Deal {
    public static void main(String[] args) {
        int numHands =3D Integer.parseInt(args[0]);
        int cardsPerHand =3D Integer.parseInt(args[1]);

       //Make a normal 52-card deck.
        String[] suit =3D new String[]
            {"spades", "hearts", "diamonds", "clubs"};
        String[] rank =3D new String[]
            {"ace","2","3","4","5","6","7","8",
             "9","10","jack","queen","king"};
        List&lt;String&gt; deck =3D new ArrayList&lt;String&gt;();
        for (int i =3D 0; i &lt;suit.length; i++)
            for (int j =3D 0; j &lt;rank.length; j++)
                deck.add(rank[j] + " of " + suit[i]);

        Collections.shuffle(deck);

        for (int i=3D0; i&lt;numHands; i++)
            System.out.println(dealHand(deck, cardsPerHand));
    }
}
</PRE></BLOCKQUOTE>Running the program produces the following output.=20
  <BLOCKQUOTE><PRE>% java Deal 4 5

[8 of hearts, jack of spades, 3 of spades, 4 of spades,
    king of diamonds]
[4 of diamonds, ace of clubs, 6 of clubs, jack of hearts,
    queen of hearts]
[7 of spades, 5 of spades, 2 of diamonds, queen of diamonds,
    9 of clubs]
[8 of spades, 6 of diamonds, ace of spades, 3 of hearts,=20
    ace of hearts]
</PRE></BLOCKQUOTE>
  <P>Although the <CODE>subList</CODE> operation is extremely powerful, =
some=20
  care must be exercised when using it. The semantics of the =
<CODE>List</CODE>=20
  returned by <CODE>subList</CODE> become undefined if elements are =
added to or=20
  removed from the backing <CODE>List</CODE> in any way other than via =
the=20
  returned <CODE>List</CODE>. Thus, it's highly recommended that you use =
the=20
  <CODE>List</CODE> returned by <CODE>subList</CODE> only as a transient =
object=20
  =97 to perform one or a sequence of range operations on the backing=20
  <CODE>List</CODE>. The longer you use the <CODE>subList</CODE> =
instance, the=20
  greater the probability that you'll compromise it by modifying the =
backing=20
  <CODE>List</CODE> directly or through another <CODE>subList</CODE> =
object.=20
  Note that it is legal to modify a sublist of a sublist and to continue =
using=20
  the original sublist (though not concurrently). </P></BLOCKQUOTE>
<H3 fmstyle=3D"C-Head">List Algorithms</H3>
<BLOCKQUOTE>Most polymorphic algorithms in the <CODE>Collections</CODE> =
class=20
  apply specifically to <CODE>List</CODE>. Having all these algorithms =
at your=20
  disposal makes it very easy to manipulate lists. Here's a summary of =
these=20
  algorithms, which are described in more detail in the <A=20
  =
href=3D"http://java.sun.com/docs/books/tutorial/collections/algorithms/in=
dex.html"=20
  target=3D_top>Algorithms</A><A=20
  =
href=3D"http://java.sun.com/docs/books/tutorial/collections/algorithms/in=
dex.html"=20
  target=3D_top><IMG height=3D11 alt=3D" (in the Collections trail)"=20
  =
src=3D"http://java.sun.com/docs/books/tutorial/images/tutorialIcon.gif" =
width=3D11=20
  align=3Dmiddle border=3D0></A> section.=20
  <UL>
    <LI><CODE>sort</CODE> =97 sorts a <CODE>List</CODE> using a merge =
sort=20
    algorithm, which provides a fast, stable sort. (A <I>stable sort</I> =
is one=20
    that does not reorder equal elements.)=20
    <LI><CODE>shuffle</CODE> =97 randomly permutes the elements in a=20
    <CODE>List</CODE>.=20
    <LI><CODE>reverse</CODE> =97 reverses the order of the elements in a =

    <CODE>List</CODE>.=20
    <LI><CODE>rotate</CODE> =97 rotates all the elements in a =
<CODE>List</CODE> by=20
    a specified distance.=20
    <LI><CODE>swap</CODE> =97 swaps the elements at specified positions =
in a=20
    <CODE>List</CODE>.=20
    <LI><CODE>replaceAll</CODE> =97 replaces all occurrences of one =
specified=20
    value with another.=20
    <LI><CODE>fill</CODE> =97 overwrites every element in a =
<CODE>List</CODE> with=20
    the specified value.=20
    <LI><CODE>copy</CODE> =97 copies the source <CODE>List</CODE> into =
the=20
    destination <CODE>List</CODE>.=20
    <LI><CODE>binarySearch</CODE> =97 searches for an element in an =
ordered=20
    <CODE>List</CODE> using the binary search algorithm.=20
    <LI><CODE>indexOfSubList</CODE> =97 returns the index of the first =
sublist of=20
    one <CODE>List</CODE> that is equal to another.=20
    <LI><CODE>lastIndexOfSubList</CODE> =97 returns the index of the =
last sublist=20
    of one <CODE>List</CODE> that is equal to another. =
</LI></UL></BLOCKQUOTE><IMG=20
height=3D8 alt=3D""=20
src=3D"http://java.sun.com/docs/books/tutorial/images/blueline.gif" =
width=3D550=20
align=3Dbottom> <BR>
<TABLE width=3D550 summary=3Dlayout>
  <TBODY>
  <TR>
    <TD vAlign=3Dcenter align=3Dleft><A=20
      =
href=3D"http://java.sun.com/docs/books/tutorial/collections/interfaces/se=
t.html"=20
      target=3D_top><IMG height=3D26 alt=3D"Previous Page"=20
      =
src=3D"http://java.sun.com/docs/books/tutorial/images/PreviousArrow.gif" =

      width=3D26 align=3Dmiddle border=3D0></A> <A=20
      =
href=3D"http://java.sun.com/docs/books/tutorial/collections/TOC.html#inte=
rfaces"=20
      target=3D_top><IMG height=3D26 alt=3D"Lesson Contents"=20
      src=3D"http://java.sun.com/docs/books/tutorial/images/TOCIcon.gif" =
width=3D26=20
      align=3Dmiddle border=3D0></A> <A=20
      =
href=3D"http://java.sun.com/docs/books/tutorial/collections/interfaces/qu=
eue.html"=20
      target=3D_top><IMG height=3D26 alt=3D"Next Page"=20
      =
src=3D"http://java.sun.com/docs/books/tutorial/images/NextArrow.gif"=20
      width=3D26 align=3Dmiddle border=3D0></A></TD>
    <TD vAlign=3Dcenter align=3Dmiddle><FONT size=3D-1><A=20
      href=3D"http://java.sun.com/docs/books/tutorial/index.html"=20
      target=3D_top>Start of Tutorial</A> &gt; <A=20
      =
href=3D"http://java.sun.com/docs/books/tutorial/collections/index.html"=20
      target=3D_top>Start of Trail</A> &gt; <A=20
      =
href=3D"http://java.sun.com/docs/books/tutorial/collections/interfaces/in=
dex.html"=20
      target=3D_top>Start of Lesson</A> </FONT></TD>
    <TD vAlign=3Dcenter align=3Dright><FONT size=3D-1><A=20
      href=3D"http://java.sun.com/docs/books/tutorial/search.html"=20
      target=3D_top>Search</A> <BR><A=20
      =
href=3D"http://developer.sun.com/contact/tutorial_feedback.jsp">Feedback =

      Form</A> </FONT></TD></TR></TBODY></TABLE>
<P><FONT size=3D-1><A=20
href=3D"http://java.sun.com/docs/books/tutorial/information/copyright.htm=
l">Copyright</A>=20
1995-2005 Sun Microsystems, Inc. All rights reserved. </FONT></P>
<SCRIPT language=3DJavaScript=20
src=3D"http://java.sun.com/js/omi/jsc/s_code_remote.js"></SCRIPT>
</BODY></HTML>

------=_NextPart_000_009A_01C68309.B57B7870
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/docs/books/tutorial/images/PreviousArrow.gif

R0lGODdhGgAaAPUAAPf8//Hy9+34/+bu/97e3tbW3tLh+87W3snN28TS9LvG3LG52ae856XG56O4
96Cu1p2nwJy955y155S155St54+o2Y+awIyt54yl54ea1oSl54Sc54OVwn6LvHuc53uU53uT2nuM
53OM53OM3nOE1nKM03KE3m+BvWuE1muEzmt7zmN7zmN7xmN7vV9zvV50sV5zxlBouEpgrUpaljdP
nwokeQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAGgAaAAAG/sCGsBEpFiWSiZJC
uTgxUI1mkxkaj8llswnFSDdg4TWCVE6Y3MolqslQiUYJ2TypoCVM7xTsGSMrEQABAQCFhgNTbhke
IFdJFRWEBYaUCWAbHhsgfUeQGYUDC5SGEoqMjEd1JQEJJzKfowAYfBkfIB9IEhUnFgcuMhaTsYuL
H8YjfyAvFgbBsQ8AA3y2HyMhjx3AsQAKLzWFm7e2ISNKuzIQlAEP3jXfANQgIuTlFBks2oIL7e79
/tUjRjTJ0EIbAn7+EtYQEdDEwIIWoiV40EJhQoYkUDyU0UEiA138HDBg4WLFCBMZUTi5J+PEoQQM
GOyrkUABCxYoSOhEkeJCnoUMrl6MMgBTJgABGXIqTaECSoYUMmbEGgBTQSEGJVBkZdr0J1QahKYO
AJWSKwsvG0rIoGGBwDZKSVMwvdkmbQwaM/DKeHGig98OHDJUGGGWBQwpGUCweCFjbVQakGk0ZqFC
roqbMFpcAgGC500XMVy8iDHaBQumK26SdEFFEyMQI7KimJ1iRW0VuFW72A0mnK2AwDOSsHyZRYvd
ooMAADs=

------=_NextPart_000_009A_01C68309.B57B7870
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/docs/books/tutorial/images/TOCIcon.gif

R0lGODlhGgAaAPcAAPz8//v7/vz8/v7+/+ns+uXp+/P1/vn6/vf4/HOBt3B9rX+Owo+e0ouZy5im
26a16sDH4vDz/vDy+WJzqWJyp5Kh1Jur4KCw5au78LDA9bK+5c3V8ODl9u3w+kZhqVVppGZ6tpur
26W147DA8Ku657XF8Kay1sTS+7XB4dzk++Xr/ezv+O/x9/v8//r7/vn6/fj5/AAlfgkthBAzhxEz
hyBAjyFBjydGlDBOlzFOl0VgoVdxr1VtqWV7sWZ8sXeLvnaKun6Rv4WXxImaxIqbxLXH8qKw0r7N
8qq21NTb7M/W5/f5/vb4/WR7sXWKuoOWwoygy4iaxImbxKvA8JqpzLvL8Ky62dTg/LvF3Nnk/ODn
9+vx/t/k7+/0/+7z/vL2//L1/LDF8Ka327fH58DQ8LrF3Nrk+MzV5/D1//b5//X4/u7x9/j6/vf5
/fz9//v8/omi0cvV5+bu/fP3/vH1/LXL8OLs/O7z+/X4/bvQ8Onx/e/1/vL2/Pn7/vL3/vf6/vX4
/MDV8Orw9/v9//3+//z9/sXb8PX7//r9//P7//z+//v+//7///3+/v////7+/gAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAGgAaAEAI/wANGQpE
sGAgMmTyKKxSpY7DOiUihgkzImEDO3cKNXLEsSOAJQIK9RkwgI4FOwwyPIBYAlEMIooc+RlCI4YN
JIpyCpkRA0ccRAoaMBgxggSGBw6QMmAgtEFTp04XQHVaEJFVq3ay6kl0FVGirHa6IJrgQEQVrC85
0gBC0lEOHo5oOLEqiIJTBxcmXrxiIMsSNx0DO1Jz4kSGKV2EOjB48GDChQwdlhgzJowGoiQ0BLKq
CA8jNgM4MhowmjQjRjkHTbj7QGGM16+jsNAB24kiRmtov4aCSKgFhw3kvHwjwAaPAY8c2fDhosaO
AgVMeNDSwIGFlogWoUa9KOYANm4YOf8ieXqQggVLLYzQQOJBAxQQJHSZT7/+fDRfuoSdMJCxY4V5
RNZQRJNZRlRBZHSl4IIKikACQVe9QUgjAwjwyGiDdJXIV0BVdwEZDXTBByABvNFIch21oYYXYLiw
xBIcJMbABa3lAQcIYlghRhIcKYEFFwO4QdIbPrJgRogOZBCgVS+x4YgPNJQxgBQxUOFIDzScMUgT
MXwg1AVVhHhEWo6Q+YgOOpQZBAEEbGCHb2BC1EAMP7ghABEvYcFDDFI+EcMTRtwgwwJ2KOBARFYd
AsAhA7TwByEDpDEHaYrskUYaioyF3qEhjtCHGy4QwkaLFcLwghsRqBBBBEUkVl0IFE1DcVEWc2xx
ACFMCPAGAhKs0IELAggQQQoWyKjBFCM8YEEDFTg1QQITPBsttNNWmwAJU2BAQnvtWeCtA+CGu9S4
4zYQEAA7

------=_NextPart_000_009A_01C68309.B57B7870
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/docs/books/tutorial/images/NextArrow.gif

R0lGODdhGgAaAPUAAPf8//Hy9+34/+bu/97e3tbW3tLh+8nN28TS9LvG3LHI+bG52ae856XG56Cu
1p2nwJy955y155S155St54+o2Y+awIyt54yl54ea1oSl54Sc54OVwn6LvHuc53uU53uT2nuM53OM
53OM3nOE1nKM03KE3m+BvWuE1muEzmt7zmN7zmN7xmN7vV9zvV50sV5zxlBouEpgrUpaljdPnwok
eQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAGgAaAAAG/sCGsAEpFiMRiXIy
sTgv0ExGgxkaj8llswm9SDVg4fWolDCblq43g6ESjREIQ56cUJiU7hfcGSMHAIGCAQEAFBhTbRgd
H1dIEgiCkgUAAhgfix0aH31YSg2SggmAASQfnKieShGhgRguHAgBKCQYHh8eSFlmFq0ABQ4wMQUY
KyIeHiKPWhaFDq0DCQYbMCgiIiC7Z70ANC4JvhUxxtdlTE7cNOouDoWCDzEvJOVmE+r3+OsL7hUz
LSfXtuUbuO4AAHH/RJQ4Z4EgPhYOFADq9+/EiS1QPrRYwSDCPRcUIjBAAIiDPxQWLTShkOGDiRUI
EHhjQJOkIBP+UpxA8eRClZtahRbUNBDKhYwXKlCk0MNGQyQADBTYDCUjRgsVKZZGSQQIwAB3oQLM
8Id1xdY2E3xJItDP6oq3UqZQuRCBwgYOeDmYcBFDxtgZ8d62kNuG0QcUMPz+9RsDcAwYglmAmYzr
wwkVL1q0gMHZBQzNLV6wYKGZyqYOt5KRGGExq4rXb9+SLn0a160Q10Sw3pk1hWzQLoIAADs=

------=_NextPart_000_009A_01C68309.B57B7870
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/docs/books/tutorial/images/blueline.gif

R0lGODlhJgIIAPcAAAJVswNWtgZWtQdRsAdTtQhWuwlSuQpWtApWtgtTtwtVtAxUuAxWtRJOsBVF
qSRFrjVKmTs8aD47Zj47aD48bj85ZUA5ZUA6ZkA9akA/aUE7aUE+bUFMnEJNnUM6aUM8aEZTokdM
nkdNoUdOnkhPn0hQpUhbxElQnkpMo0tMpkw7aExNnU5RnlFQoFs1aGBKn29cinJqv6CNoanj1aqH
nbb/7Lyksb2lsr6irr6isL7X07+dtb/19cGjr8H31cKgsMKir8KiscKjssL11MP01MSlt8bGxsbx
08fx2civwsrx1Mr258zu083Nzc6wyM7//9D1+9H66NL/+9T/99X27dbW1tu359vu6N3x8t7/79/M
39//7eDg4OD/7eD/7+Hh4eH/8OL/6ePu5uP+7eP/8+X97eb87+jUzejo6Oj//+n27Ovr6+3t7e/q
8PHx8fLr8/Ly8vT09PT6//b29vf7/Pj4+Pj+/Pj/6fn+9/r6+vv7+/zo4fz8/Pz97fz/5/z/6v3o
4/3s5P39/f3+7v75/f76+/787f7+/v7+///07f/1/v/28P/3/P/4/f/4///5+//5/P/5/f/6/P/7
7P/88P/+5P/+6f///wAAABgaGHx/dQB4XBYAAIgAAAAAJhgAGHUAdVAAXAAAawAALgAAZ3wAaQAA
YgAAbAEAACMAAGsAEu8AAP8a4utm1ejoxgAFAAXAtRcCmfgfi8PAw7ICsq40rgAYAAB1AABQAAAg
AAAACgDvAAD/AADqAADYHAACAAD5AACIvxoAAGYAAOgAvn4AAEgAAncA4sQA1dwAxgD/tQDwmSUw
iwD/wwDtsgHArv8CAO1fACisA/8aBe1mBCTolP8AF+0A/CBvxAAAGAAAWgAJpAAA7wAA/wAA8AgA
nAIAACYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACH+JEZpbGUgd3JpdHRlbiBi
eSBBZG9iZSBQaG90b3Nob3CoIDUuMAAsAAAAACYCCAAACP4AnzzhAQWKnDeECCFq06ehw4cQI0qc
SLGixYsYM2rcyLGjx48gQ4ocSbKkyZMoU6o0acnSn0GUKBm648dPpUuHcl6KEaMDBAgcVrBgcWIE
iaNIkypdyrSp06dQo0qdSrWq1atYs2rdyrWr169gw4odSxZsiBAiUKRIUQJEixYv0Lhxk+eSCRMO
FCgQwGDAAAIFDAgeTLiw4cOIEytezLix48eQI0ueTLmy5cuYM2vezLmz58+bDxxAsCBBggAAGjR4
0OTLlzmHrFiBMWFChAoWLGyg8KG379/AgwsfTry48ePIkytfzry58+fQo0ufTr269evYs2u3fuGC
BA0ePP5gyKBChQsjXLjUueTIkRYnTnbQKFIkiYwe+PPr38+/v///AAYo4IAEFmjggQgmqOCCDDbo
4IMQRijhhBRWGKEQQtxgQxBB/JADDjgAUcUaawhySQ01SJFGGljoQAUVU8yAxIw01mjjjTjmqOOO
PPbo449ABinkkEQWaeSRSCap5JJMNunkk1AyqYQSRAwxJRNHDDGED2zUsd4lUURxBR102CGGGmqQ
sUQYbLbp5ptwxinnnHTWaeedeOap55589unnn4AGKuighBZq6KGIJlqoGWZ0scUYY5ThRRZZgHHI
JTjxMckkZwACSCKB7LHHInhEYuqpqKaq6qqsturqqzCwxirrrLTWauutuOaq66689urrr8AGK+yw
vzLCCCSSPPJIIXo00ogil+SRRxxwBAQAOw==

------=_NextPart_000_009A_01C68309.B57B7870
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/docs/books/tutorial/images/apiIcon.gif

R0lGODlhCwALAKIBAP///7+/v+SZ/1czZgAiGaAA3YgAuwAAACH5BAEAAAEALAAAAAALAAsAAAMl
GKq1rqKMB4UZ0wlrbg5bJ2JBUYgoQQQYaqhL28FOSz/DTa1OAgA7

------=_NextPart_000_009A_01C68309.B57B7870
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/docs/books/tutorial/images/tutorialIcon.gif

R0lGODlhCwALAKIBAP///7+/vwAiGQAiGQAiGQAiGQAiGQAAACH5BAEAAAEALAAAAAALAAsAAAMl
GKq1rqKMB4UZ0wlrbg5bJ2JBUYgoQQQYaqhL28FOSz/DTa1OAgA7

------=_NextPart_000_009A_01C68309.B57B7870
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/docs/books/tutorial/images/sourceIcon.gif

R0lGODlhCwALAKIBAP///7+/v/+ZoGYzOAADIt0AEbsADwAAACH5BAEAAAEALAAAAAALAAsAAAMl
GKq1rqKMB4UZ0wlrbg5bJ2JBUYgoQQQYaqhL28FOSz/DTa1OAgA7

------=_NextPart_000_009A_01C68309.B57B7870
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/docs/books/tutorial/figures/collections/colls-fivePossibleCursor.gif

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

------=_NextPart_000_009A_01C68309.B57B7870
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://java.sun.com/js/omi/jsc/s_code_remote.js

/* SiteCatalyst Code Version: G.5 */=0A=
/* SMI Version 6.3 */=0A=
/*Note to SMI web developers. Do not install or test this code on your =
site without approval from the .SUN organization!*/=0A=
/* =0A=
Convert all index.html, index.jsp, etc. to foo/.=0A=
Increase s_hier to 15 levels=0A=
Add java.net to internal links.=0A=
*/=0A=
=0A=
/************************** CONFIG SECTION **************************/=0A=
=0A=
/* Set the Report Suite ID(s) and site ID for each Sun site. The site ID =0A=
   is pre-pended to pageNames and channel names. */=0A=
   var s_account=3D"sunglobal,sundeveloper"=0A=
// var s_account=3D"devsunjavas"=0A=
=0A=
/* Uncomment one of the following */=0A=
var s_siteid =3D "jsc:"=0A=
=0A=
var s_dynamicAccountSelection=3Dfalse=0A=
var s_dynamicAccountList=3D""=0A=
=0A=
var =
s_linkInternalFilters=3D"javascript:,sun.com,java.com,opensolaris.org,sun=
-catalogue.com,java.net,netbeans.org,globalspecials.sun.com"=0A=
=0A=
/* List s_prop and s_eVar variables to be passed during =
custom/exit/download links.=0A=
   Otherwise, values passed in are ignored. */=0A=
var s_linkTrackVars=3D"None"=0A=
=0A=
/* List event values in "s_events" to be passed during =
custom/exit/download links.=0A=
   Otherwise, events are ignored by default. */=0A=
var s_linkTrackEvents=3D"None"=0A=
=0A=
/* Plugin Config - may be specific to each Sun site */=0A=
var s_usePlugins=3Dtrue=0A=
=0A=
function s_doPlugins() {=0A=
  /* Add calls to plugins here */=0A=
        /*pageType 404 fix */=0A=
        if(s_pageType=3D=3D""){=0A=
  /* External campaigns */=0A=
  if(s_campaign=3D=3D"")=0A=
    s_vp_getCGI('s_campaign','cid');=0A=
/* Campaign Pathing-30 minutes */=0A=
  =
s_vp_getCustomPagePath("s_prop4",s_vp_getValue("s_campaign"),"cmpPath","c=
id=3D");=0A=
/* Campaign Page Views */=0A=
	s_vp_setAndPersistValue('s_prop5',s_vp_getValue('s_campaign'),1.0/48);=0A=
  // Internal campaigns=0A=
  s_vp_getCGI('s_eVar1','intcmp');=0A=
//  s_vp_getFormAbandonState("s_prop1","o","Form Abandonment");=0A=
        }=0A=
}=0A=
=0A=
// ###################################################=0A=
// CODE CHANGE FOR FILE: PROTOCOL EXCLUSION 6/28/2005=0A=
// ###################################################=0A=
// NEW CODE:=0A=
   var s_isValid =3D true;=0A=
   if (location.protocol=3D=3D"file:") { s_isValid=3Dfalse; }=0A=
// END CODE CHANGE=0A=
=0A=
/***************** STANDARD CODE FOR ALL SUN SITES ******************/=0A=
/**********TO BE CHANGED ONLY BY SMI .SUN PROGRAM MANAGEMENT*****/=0A=
/* Make certain these variables are defined, if not on page */=0A=
if (typeof s_channel=3D=3D'undefined')=0A=
   var s_channel =3D "";=0A=
if (typeof s_pageName=3D=3D'undefined')=0A=
   var s_pageName =3D "";   =0A=
if(typeof s_events=3D=3D'undefined')=0A=
  var s_events=3D"";=0A=
if(typeof s_campaign=3D=3D'undefined')=0A=
  var s_campaign=3D"";=0A=
if(typeof s_hier1=3D=3D'undefined')=0A=
  var s_hier1=3D"";=0A=
if (typeof s_pageType=3D=3D'undefined')=0A=
  var s_pageType=3D"";=0A=
        =0A=
        /*pageType 404 fix */   =0A=
        if(s_pageType=3D=3D""){=0A=
/* Check for this common problem */=0A=
if (s_pageName.toLowerCase()=3D=3D"document.title"){=0A=
  s_pageName=3Ddocument.title;=0A=
}=0A=
=0A=
/* Use URL as default page name unless s_pageName already populated. */=0A=
if (typeof s_pageName!=3D'undefined') {=0A=
    // See if it has a value=0A=
    if (s_pageName=3D=3D"") {=0A=
        s_pageName=3Dwindow.top.location.pathname.toLowerCase();=0A=
        var s_iNames =3D =
["index.html","index.jsp","index.htm","index.shtml","index.xml","index.jh=
tml","index.jshtml","index.jspa","index.php"];=0A=
        for (var a=3D0; a<s_iNames.length; a++) {=0A=
            var s_iName =3D "/"+s_iNames[a];=0A=
            if (s_pageName.indexOf(s_iName) > -1 && =
s_pageName.indexOf(s_iName) =3D=3D s_pageName.length - s_iName.length) {=0A=
                s_pageName =3D s_pageName.substring(0, s_pageName.length =
- s_iNames[a].length);=0A=
            }=0A=
        }=0A=
    }=0A=
}=0A=
        }=0A=
var s_disableLegacyVars=3Dtrue=0A=
var s_eVarCFG=3D""=0A=
=0A=
        /*pageType 404 fix */=0A=
        if(s_pageType=3D=3D""){=0A=
/* Link Tracking Config */=0A=
var s_trackDownloadLinks=3Dtrue  // downloads=0A=
var s_trackExternalLinks=3Dtrue  // external links=0A=
var s_trackInlineStats=3Dtrue    // ClickMap=0A=
var =
s_linkDownloadFileTypes=3D"exe,zip,wav,mp3,mov,mpg,avi,doc,pdf,xls,bin,ta=
r,Z,gz"=0A=
var s_linkLeaveQueryString=3Dfalse=0A=
=0A=
/* Populate "s_channel" variable (if not already populated). Based on 15 =
levels of directory. */=0A=
if(s_channel=3D=3D""){=0A=
  var s_t1=3D0=0A=
  var s_t2=3D0=0A=
  var s_du=3D""=0A=
  s_du=3Dwindow.top.location.href.toLowerCase()=0A=
  if((s_t1=3Ds_du.indexOf("://"))>=3D0){=0A=
    if((s_t2=3Ds_du.indexOf("/",s_t1+3))>=3D(s_t1+3)){=0A=
      if(s_du.indexOf(".",s_t1+3)<s_t2){=0A=
        var s_c2=3D""=0A=
       =0A=
        s_t1=3Ds_t2+1=0A=
        s_t2=3Ds_du.lastIndexOf("/")=0A=
        s_channel=3Ds_du.substring(s_t1,s_t2)=0A=
       =0A=
        // Replace all "/" chars with ":"=0A=
        for(s_t2=3D0; s_t2<s_channel.length; s_t2++){=0A=
          if(s_channel.charAt(s_t2)=3D=3D"/"){=0A=
            // Bogus code, but JavaScript 1.0-compatible=0A=
            =
s_c2=3Ds_channel.substring(0,s_t2)+":"+s_channel.substring(s_t2+1,s_chann=
el.length)=0A=
            s_channel=3Ds_c2=0A=
          }=0A=
        }=0A=
      }=0A=
    }=0A=
    =0A=
  =0A=
    // Remove everything after the fifteenth "/"=0A=
    s_t1=3D0=0A=
    for(s_t2=3D0;s_t2<s_channel.length;s_t2++){=0A=
      if(s_channel.charAt(s_t2)=3D=3D":"){=0A=
        s_t1++=0A=
        if(s_t1=3D=3D15){=0A=
          s_channel=3Ds_channel.substring(0,s_t1-1)=0A=
          break=0A=
        }=0A=
      }=0A=
    }=0A=
  }=0A=
}=0A=
=0A=
/* Places entire path into Hierarchy variable, or just s_channel if =
populated on page. */=0A=
=0A=
if(s_hier1=3D=3D""){=0A=
	if(s_channel!=3D=3D""){=0A=
      s_hier1=3Ds_siteid+s_channel=0A=
    }=0A=
}=0A=
=0A=
=0A=
/* STANDARD SUN GLOBAL ACCOUNT CODE: pre-pend "pageName", "channel", and =
"s_hier" with "s_siteid" if not already prepended*/=0A=
if(typeof s_siteid!=3D'undefined'){=0A=
  if(typeof s_pageName!=3D'undefined'&&s_pageName.length>0){=0A=
    if(s_pageName.substr(0,s_siteid.length).toLowerCase()!=3Ds_siteid){=0A=
      s_pageName=3Ds_siteid+s_pageName;=0A=
    }=0A=
  }=0A=
  if(s_channel.length>0){=0A=
    if (s_channel.substr(0,s_siteid.length).toLowerCase()!=3Ds_siteid){=0A=
        s_channel=3Ds_siteid+s_channel;=0A=
    }=0A=
  }=0A=
if(s_hier1.length>0){=0A=
    if (s_hier1.substr(0,s_siteid.length).toLowerCase()!=3Ds_siteid){=0A=
        s_hier1=3Ds_siteid+s_hier1;=0A=
    }=0A=
  }=0A=
}=0A=
=0A=
/* PUT SITE_ID INTO S_PROP2*/=0A=
if(typeof s_siteid=3D=3D'undefined'){var s_siteid=3D""};=0A=
if(typeof s_prop2=3D=3D'undefined'){var s_prop2=3D""};=0A=
   s_prop2=3Ds_siteid;=0A=
        }=0A=
=0A=
/************************** PLUGINS SECTION *************************/=0A=
/* You may insert any plugins you wish to use here.                 */=0A=
/*=0A=
 * Plugin: Get State Of Form On Abandon=0A=
 New Form Abandon Plugin goes here when available.=0A=
 */=0A=
=0A=
/*=0A=
 * Plugin: Get Query String CGI Variable Value=0A=
 */=0A=
function s_vp_getCGI(vs,k)=0A=
        {var v=3D'';if(k&&s_wd.location.search){var =
q=3Ds_wd.location.search,=0A=
        =
qq=3Dq.indexOf('?');q=3Dqq<0?q:q.substring(qq+1);v=3Ds_pt(q,'&',s_cgif,=0A=
        k)}s_vpr(vs,v)}function s_cgif(t,k){if(t){var =
te=3Dt.indexOf('=3D'),=0A=
        =
sk=3Dte<0?t:t.substring(0,te),sv=3Dte<0?'True':t.substring(te+1);if(=0A=
        sk=3D=3Dk)return s_epa(sv)}return ''}=0A=
/* =0A=
Plugin: Custom Page Path v1.0 (Campaign Pathing-30 minutes)=0A=
*/=0A=
function s_vp_getCustomPagePath(s,v,c,p) {=0A=
var pn=3Ds_vp_getValue("s_pageName");=0A=
var t=3Dnew Date;t.setTime(t.getTime()+1800000); =0A=
if(v){if(s_c_w(c,v,t)){s_vpr(s,p+v+":"+pn)}}=0A=
else{v=3Ds_c_r(c);if(v){s_c_w(c,v,t);s_vpr(s,pn);}}=0A=
}=0A=
/*=0A=
 * Plugin: setAndPersistValue 0.1 - get a value on every page-30 minutes=0A=
 */=0A=
function s_vp_setAndPersistValue(vs,v,a){=0A=
	var l,e=3Dnew Date;if(v){e.setTime(e.getTime()+a*86400000);s_c_w(=0A=
	's_p_'+vs,v,a?e:a)};l=3Ds_c_r('s_p_'+vs);s_vpr(vs,l)}=0A=
/*=0A=
 * Plugin: Get Plugin Modified Value=0A=
 */=0A=
function s_vp_getValue(vs)=0A=
        {var k=3Dvs.substring(0,2)=3D=3D's_'?vs.substring(2):vs;return =
s_wd[=0A=
        's_vpm_'+k]?s_wd['s_vpv_'+k]:s_gg(k)}=0A=
/*=0A=
 * Plugin Utilities v2.0 (Required For All Plugins)=0A=
 */=0A=
function s_vpr(vs,v){if(s_wd[vs])s_wd[vs]=3Ds_wd[vs];else s_wd[vs]=3D''=0A=
if(vs.substring(0,2) =3D=3D =
's_')vs=3Dvs.substring(2);s_wd['s_vpv_'+vs]=3Dv=0A=
s_wd['s_vpm_'+vs]=3D1}function s_dt(tz,t){var d=3Dnew =
Date;if(t)d.setTime(=0A=
t);d=3Dnew Date(d.getTime()+(d.getTimezoneOffset()*60*1000))=0A=
return new Date(Math.floor(d.getTime()+(tz*60*60*1000)))}=0A=
function s_vh_gt(k,v){var vh=3D'|'+s_c_r('s_vh_'+k),vi=3Dvh.indexOf('|'+v=0A=
+'=3D'),ti=3Dvi<0?vi:vi+2+v.length,pi=3Dvh.indexOf('|',ti),t=3Dti<0?'':=0A=
vh.substring(ti,pi<0?vh.length:pi);return t}function s_vh_gl(k){var=0A=
vh=3Ds_c_r('s_vh_'+k),e=3Dvh?vh.indexOf('=3D'):0;return =
vh?(vh.substring(0,=0A=
e?e:vh.length)):''}function s_vh_s(k,v){if(k&&v){var e=3Dnew Date,st=3D=0A=
e.getTime(),y=3De.getYear(),c=3D's_vh_'+k,vh=3D'|'+s_c_r(c)+'|',t=3Ds_vh_=
gt(k,=0A=
v);e.setYear((y<1900?y+1900:y)+5);if(t)vh=3Ds_rep(vh,'|'+v+'=3D'+t+'|','|=
'=0A=
);if(vh.substring(0,1)=3D=3D'|')vh=3Dvh.substring(1);if(vh.substring(=0A=
vh.length-1,vh.length)=3D=3D'|')vh=3Dvh.substring(0,vh.length-1);vh=3Dv=0A=
+'=3D[PCC]'+(vh?'|'+vh:'');s_c_w(c,vh,e);if(s_vh_gt(k,v)!=3D'[PCC]')=0A=
return 0;vh=3Ds_rep(vh,'[PCC]',st);s_c_w(c,vh,e)}return 1}=0A=
=0A=
/************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/=0A=
var =
s_un,s_ios=3D0,s_q=3D'',s_code=3D'',code=3D'',s_bcr=3D0,s_lnk=3D'',s_eo=3D=
'',=0A=
s_vb,s_pl,s_tfs=3D0,s_etfs=3D0,s_wd=3Dwindow,s_d=3Ds_wd.document,s_ssl=3D=
(=0A=
s_wd.location.protocol.toLowerCase().indexOf('https')>=3D0),s_n=3D=0A=
navigator,s_u=3Ds_n.userAgent,s_apn=3Ds_n.appName,s_v=3Ds_n.appVersion,=0A=
s_apv,s_i,s_ie=3Ds_v.indexOf('MSIE '),s_ns6=3Ds_u.indexOf('Netscape6/')=0A=
if(s_v.indexOf('Opera')>=3D0||s_u.indexOf('Opera')>=3D0)s_apn=3D'Opera';v=
ar=0A=
s_isie=3D(s_apn=3D=3D'Microsoft Internet Explorer'),s_isns=3D(s_apn=3D=3D=0A=
'Netscape'),s_isopera=3D(s_apn=3D=3D'Opera'),s_ismac=3D(s_u.indexOf('Mac'=
)>=3D0)=0A=
if(s_ie>0){s_apv=3DparseInt(s_i=3Ds_v.substring(s_ie+5));if(s_apv>3)s_apv=
=3D=0A=
parseFloat(s_i)}else if(s_ns6>0)s_apv=3DparseFloat(s_u.substring(s_ns6=0A=
+10));else s_apv=3DparseFloat(s_v);function s_fl(s,l){return (s+''=0A=
).substring(0,l)}function s_co(o){if(!o)return o;var n=3Dnew Object=0A=
for(x in o)n[x]=3Do[x];return n}function s_num(x){var s=3Dx.toString(),g=3D=0A=
'0123456789',p,d;for(p=3D0;p<s.length;p++){d=3Ds.substring(p,p+1);if(=0A=
g.indexOf(d)<0)return 0}return 1}function s_rep(s,o,n){var i=3D=0A=
s.indexOf(o),l=3Dn.length>0?n.length:1;while(s&&i>=3D0){s=3Ds.substring(0=
,i)=0A=
+n+s.substring(i+o.length);i=3Ds.indexOf(o,i+l)}return s}function s_ape(=0A=
s){return s?s_rep(escape(''+s),'+','%2B'):s}function s_epa(s){=0A=
return s?unescape(s_rep(''+s,'+',' ')):s}function s_pt(s,d,f,a){var t=3D=0A=
s,x=3D0,y,r;while(t){y=3Dt.indexOf(d);y=3Dy<0?t.length:y;t=3Dt.substring(=
0,y)=0A=
r=3Df(t,a);if(r)return =
r;x+=3Dy+d.length;t=3Ds.substring(x,s.length);t=3Dx<=0A=
s.length?t:''}return ''}function =
s_isf(t,a){if(t.substring(0,2)=3D=3D's_')=0A=
t=3Dt.substring(2);return (t!=3D''&&t=3D=3Da)}function =
s_fsf(t,a){if(s_pt(a,=0A=
',',s_isf,t))s_fsg+=3D(s_fsg!=3D''?',':'')+t;return 0}var s_fsg=0A=
function s_fs(s,f){s_fsg=3D'';s_pt(s,',',s_fsf,f);return s_fsg}var=0A=
s_c_d=3D'';function s_c_gdf(t,a){if(!s_num(t))return 1;return 0}=0A=
function s_c_gd(){var d=3Ds_wd.location.hostname,n=3Ds_gg(=0A=
'cookieDomainPeriods'),p;if(d&&!s_c_d){n=3Dn?parseInt(n):2;n=3Dn>2?n:2;p=3D=0A=
d.lastIndexOf('.');while(p>=3D0&&n>1){p=3Dd.lastIndexOf('.',p-1);n--}=0A=
s_c_d=3Dp>0&&s_pt(d,'.',s_c_gdf,0)?d.substring(p):''}return s_c_d}=0A=
function s_c_r(k){k=3Ds_ape(k);var c=3D' '+s_d.cookie,s=3Dc.indexOf(' '+k=0A=
+'=3D'),e=3Ds<0?s:c.indexOf(';',s),v=3Ds<0?'':s_epa(c.substring(s+2=0A=
+k.length,e<0?c.length:e));return v}function s_c_w(k,v,e){var d=3D=0A=
s_c_gd(),l=3Ds_gg('cookieLifetime');v=3D''+v;l=3Dl?(''+l).toUpperCase():'=
'=0A=
if(e&&l!=3D'SESSION'&&l!=3D'NONE'){l=3DparseInt(l);if(l){e=3Dnew Date=0A=
e.setTime(e.getTime()+(parseInt(l)*1000))}}if(k&&l!=3D'NONE'){=0A=
s_d.cookie=3Dk+'=3D'+s_ape(v)+'; path=3D/;'+(e&&l!=3D'SESSION'?' =
expires=3D'=0A=
+e.toGMTString()+';':'')+(d?' domain=3D'+d+';':'');return =
s_c_r(k)=3D=3Dv}=0A=
return 0}function s_cet(f,a,et,oe,fb){var r,d=3D0=0A=
/*@cc_on@if(@_jscript_version>=3D5){try{return f(a)}catch(e){return =
et(e)}d=3D1}@end@*/=0A=
if(!d){if(s_ismac&&s_u.indexOf('MSIE 4')>=3D0)return fb(a);else{=0A=
s_wd.s_oe=3Ds_wd.onerror;s_wd.onerror=3Doe;r=3Df(a);s_wd.onerror=3Ds_wd.s=
_oe=0A=
return r}}}function s_gtfset(e){return s_tfs}function s_gtfsoe(e){=0A=
s_wd.onerror=3Ds_wd.s_oe;s_etfs=3D1;var =
code=3Ds_gs(s_un);if(code)s_d.write(=0A=
code);s_etfs=3D0;return true}function s_gtfsfb(a){return s_wd}=0A=
function s_gtfsf(w){var p=3Dw.parent,l=3Dw.location;s_tfs=3Dw;if(p&&=0A=
p.location!=3Dl&&p.location.host=3D=3Dl.host){s_tfs=3Dp;return =
s_gtfsf(s_tfs)}=0A=
return s_tfs}function s_gtfs(){if(!s_tfs){s_tfs=3Ds_wd;if(!s_etfs)s_tfs=3D=0A=
s_cet(s_gtfsf,s_tfs,s_gtfset,s_gtfsoe,s_gtfsfb)}return s_tfs}=0A=
function s_ca(un){un=3Dun.toLowerCase();var =
ci=3Dun.indexOf(','),fun=3Dci<0?=0A=
un:un.substring(0,ci),imn=3D's_i_'+fun;if(s_d.images&&s_apv>=3D3&&=0A=
!s_isopera&&(s_ns6<0||s_apv>=3D6.1)){s_ios=3D1;if(!s_d.images[imn]&&(=0A=
!s_isns||(s_apv<4||s_apv>=3D5))){s_d.write('<im'+'g name=3D"'+imn=0A=
+'" height=3D1 width=3D1 border=3D0 =
alt=3D"">');if(!s_d.images[imn])s_ios=3D0}}}=0A=
function s_it(un){s_ca(un)}function s_mr(un,sess,q,ta){un=3D=0A=
un.toLowerCase();var ci=3Dun.indexOf(','),fun=3Dci<0?un:un.substring(0,ci=0A=
),unc=3Ds_rep(fun,'_','-'),imn=3D's_i_'+fun,im,b,e,rs=3D'http'+(s_ssl?'s'=
:''=0A=
)+'://'+(s_ssl?'102':unc)+'.112.2O7.net/b/ss/'+un+'/1/G.5-PD-R/'=0A=
+sess+'?[AQB]&ndh=3D1'+(q?q:'')+(s_q?s_q:'')+'&[AQE]';if(s_ios){im=3Ds_wd=
[=0A=
imn]?s_wd[imn]:s_d.images[imn];if(!im)im=3Ds_wd[imn]=3Dnew =
Image;im.src=3Drs=0A=
if(rs.indexOf('&pe=3D')>=3D0&&(!ta||ta=3D=3D'_self'||ta=3D=3D'_top'||(s_w=
d.name&&=0A=
ta=3D=3Ds_wd.name))){b=3De=3Dnew =
Date;while(e.getTime()-b.getTime()<500)e=3D=0A=
new Date}return ''}return '<im'+'g sr'+'c=3D"'+rs=0A=
+'" width=3D1 height=3D1 border=3D0 alt=3D"">'}function s_gg(v){var =
g=3D's_'+v=0A=
return s_wd[g]||s_wd.s_disableLegacyVars?s_wd[g]:s_wd[v]}var s_qav=3D''=0A=
function s_havf(t,a){var b=3Dt.substring(0,4),s=3Dt.substring(4),n=3D=0A=
parseInt(s),k=3D's_g_'+t,m=3D's_vpm_'+t,q=3Dt,v=3Ds_gg('linkTrackVars'),e=
=3D=0A=
s_gg('linkTrackEvents');if(!s_wd['s_'+t])s_wd['s_'+t]=3D'';s_wd[k]=3Ds_wd=
[=0A=
m]?s_wd['s_vpv_'+t]:s_gg(t);if(s_lnk||s_eo){v=3Dv?v+',pageName,charSet,'=0A=
+'cookieDomainPeriods,cookieLifetime,eVarCFG,purchaseID':'';if(v&&=0A=
!s_pt(v,',',s_isf,t))s_wd[k]=3D'';if(t=3D=3D'events'&&e)s_wd[k]=3Ds_fs(s_=
wd[k=0A=
],e)}s_wd[m]=3D0;if(t=3D=3D'charSet')q=3D'ce';else =
if(t=3D=3D'cookieDomainPeriods'=0A=
)q=3D'cdp';else if(t=3D=3D'cookieLifetime')q=3D'cl';else =
if(t=3D=3D'channel')q=3D=0A=
'ch';else if(t=3D=3D'campaign')q=3D'v0';else =
if(s_num(s)){if(b=3D=3D'prop')q=3D'c'=0A=
+n;else if(b=3D=3D'eVar')q=3D'v'+n;else =
if(b=3D=3D'hier')q=3D'h'+n}if(s_wd[k]&&t!=3D=0A=
'linkName'&&t!=3D'linkType')s_qav+=3D'&'+q+'=3D'+s_ape(s_wd[k]);return =
''}=0A=
function s_hav(){var n,av=3D'charSet,cookieDomainPeriods,cookieLifetime'=0A=
+',pageName,channel,server,pageType,campaign,state,zip,events,product'=0A=
+'s,purchaseID,eVarCFG,linkName,linkType';for(n=3D1;n<26;n++)av+=3D',prop=
'=0A=
+n+',eVar'+n+',hier'+n;s_qav=3D'';s_pt(av,',',s_havf,0);return s_qav}=0A=
function s_lnf(t,h){t=3Dt?t.toLowerCase():'';h=3Dh?h.toLowerCase():'';var=0A=
te=3Dt.indexOf('=3D');if(t&&te>0&&h.indexOf(t.substring(te+1))>=3D0)=0A=
return t.substring(0,te);return ''}function s_ln(h){if(s_gg(=0A=
'linkNames'))return s_pt(s_gg('linkNames'),',',s_lnf,h);return ''}=0A=
function =
s_ltdf(t,h){t=3Dt?t.toLowerCase():'';h=3Dh?h.toLowerCase():'';var=0A=
qi=3Dh.indexOf('?');h=3Dqi>=3D0?h.substring(0,qi):h;if(t&&h.substring(=0A=
h.length-(t.length+1))=3D=3D'.'+t)return 1;return 0}function s_ltef(t,h){=0A=
t=3Dt?t.toLowerCase():'';h=3Dh?h.toLowerCase():'';if(t&&h.indexOf(t)>=3D0=
)=0A=
return 1;return 0}function s_lt(h){var lft=3Ds_gg(=0A=
'linkDownloadFileTypes'),lef=3Ds_gg('linkExternalFilters'),lif=3Ds_gg(=0A=
'linkInternalFilters')?s_gg('linkInternalFilters'):=0A=
s_wd.location.hostname;h=3Dh.toLowerCase();if(s_gg('trackDownloadLinks'=0A=
)&&lft&&s_pt(lft,',',s_ltdf,h))return 'd';if(s_gg('trackExternalLinks'=0A=
)&&(lef||lif)&&(!lef||s_pt(lef,',',s_ltef,h))&&(!lif||!s_pt(lif,',',=0A=
s_ltef,h)))return 'e';return ''}function s_lc(e){s_lnk=3Ds_co(this)=0A=
s_gs('');s_lnk=3D'';if(this.s_oc)return this.s_oc(e);return true}=0A=
function s_ls(){var l,ln,oc;for(ln=3D0;ln<s_d.links.length;ln++){l=3D=0A=
s_d.links[ln];oc=3Dl.onclick?l.onclick.toString():'';if(oc.indexOf(=0A=
"s_gs(")<0&&oc.indexOf("s_lc(")<0){l.s_oc=3Dl.onclick;l.onclick=3Ds_lc}}}=0A=
function s_bc(e){s_eo=3De.srcElement?e.srcElement:e.target;s_gs('')=0A=
s_eo=3D''}function s_ot(o){var x=3Do.type,y=3Do.tagName;return (x&&=0A=
x.toUpperCase?x:y&&y.toUpperCase?y:o.href?'A':'').toUpperCase()}=0A=
function s_oid(o){var =
t=3Ds_ot(o),p=3Do.protocol,c=3Do.onclick,n=3D'',x=3D0;if(=0A=
!o.s_oid){if(o.href&&(t=3D=3D'A'||t=3D=3D'AREA')&&(!c||!p||p.toLowerCase(=0A=
).indexOf('javascript')<0))n=3Do.href;else if(c){n=3Ds_rep(s_rep(s_rep(=0A=
s_rep(c.toString(),"\r",''),"\n",''),"\t",''),' ','');x=3D2}else if(=0A=
o.value&&(t=3D=3D'INPUT'||t=3D=3D'SUBMIT')){n=3Do.value;x=3D3}else =
if(o.src&&t=3D=3D=0A=
'IMAGE')n=3Do.src;if(n){o.s_oid=3Ds_fl(n,100);o.s_oidt=3Dx}}return =
o.s_oid}=0A=
function s_rqf(t,un){var =
e=3Dt.indexOf('=3D'),u=3De>=3D0?','+t.substring(0,e)=0A=
+',':'';return u&&u.indexOf(','+un+',')>=3D0?s_epa(t.substring(e+1)):''}=0A=
function s_rq(un){var =
c=3Dun.indexOf(','),v=3Ds_c_r('s_sq'),q=3D'';if(c<0)=0A=
return s_pt(v,'&',s_rqf,un);return s_pt(un,',',s_rq,0)}var s_sqq,s_squ=0A=
function s_sqp(t,a){var =
e=3Dt.indexOf('=3D'),q=3De<0?'':s_epa(t.substring(e=0A=
+1));s_sqq[q]=3D'';if(e>=3D0)s_pt(t.substring(0,e),',',s_sqs,q);return 0}=0A=
function s_sqs(un,q){s_squ[un]=3Dq;return 0}function s_sq(un,q){s_sqq=3D=0A=
new Object;s_squ=3Dnew Object;s_sqq[q]=3D'';var =
k=3D's_sq',v=3Ds_c_r(k),x,c=3D0=0A=
s_pt(v,'&',s_sqp,0);s_pt(un,',',s_sqs,q);v=3D'';for(x in s_squ)s_sqq[=0A=
s_squ[x]]+=3D(s_sqq[s_squ[x]]?',':'')+x;for(x in s_sqq)if(x&&s_sqq[x]&&(=0A=
x=3D=3Dq||c<2)){v+=3D(v?'&':'')+s_sqq[x]+'=3D'+s_ape(x);c++}return =
s_c_w(k,v,0=0A=
)}function s_wdl(e){s_wd.s_wd_l=3D1;var =
r=3Dtrue;if(s_wd.s_ol)r=3Ds_wd.s_ol(=0A=
e);if(s_wd.s_ls)s_wd.s_ls();return r}function s_wds(un){un=3D=0A=
un.toLowerCase();s_wd.s_wd_l=3D1;if(s_apv>3&&(!s_isie||!s_ismac||s_apv>=3D=0A=
5)){s_wd.s_wd_l=3D0;if(!s_wd.s_unl)s_wd.s_unl=3Dnew Array;s_wd.s_unl[=0A=
s_wd.s_unl.length]=3Dun;if(s_d.body&&s_d.body.attachEvent){if(=0A=
!s_wd.s_bcr&&s_d.body.attachEvent('onclick',s_bc))s_wd.s_bcr=3D1}=0A=
else if(s_d.body&&s_d.body.addEventListener){if(!s_wd.s_bcr&&=0A=
s_d.body.addEventListener('click',s_bc,false))s_wd.s_bcr=3D1}else{var=0A=
ol=3Ds_wd.onload?s_wd.onload.toString():'';if(ol.indexOf("s_wdl(")<0){=0A=
s_wd.s_ol=3Ds_wd.onload;s_wd.onload=3Ds_wdl}}}}function s_iepf(i,a){if(=0A=
i.substring(0,1)!=3D'{')i=3D'{'+i+'}';if(s_d.body.isComponentInstalled(i,=0A=
'ComponentID')){var n=3Ds_pl.length;s_pl[n]=3Dnew Object;s_pl[n].name=3Di=0A=
+':'+s_d.body.getComponentVersion(i,'ComponentID')}return 0}=0A=
function s_vs(un,x){var s=3Ds_gg('visitorSampling'),g=3Ds_gg(=0A=
'visitorSamplingGroup'),k=3D's_vsn_'+un+(g?'_'+g:''),n=3Ds_c_r(k),e=3D=0A=
new Date,y=3De.getYear();e.setYear(y+10+(y<1900?1900:0));if(s){s*=3D100=0A=
if(!n){if(!s_c_w(k,x,e))return 0;n=3Dx}if(n%10000>s)return 0}return 1}=0A=
function s_dyasmf(t,m){if(t&&m&&m.indexOf(t)>=3D0)return 1;return 0}=0A=
function s_dyasf(t,m){var =
i=3Dt?t.indexOf('=3D'):-1,un,s;if(i>=3D0&&m){var=0A=
un=3Dt.substring(0,i),s=3Dt.substring(i+1);if(s_pt(s,',',s_dyasmf,m))=0A=
return un}return 0}function s_dyas(un,l,m){if(!m)m=3Ds_wd.location.host=0A=
if(!m.toLowerCase)m=3Dm.toString();l=3Dl.toLowerCase();m=3Dm.toLowerCase(=
)=0A=
var nun=3Ds_pt(l,';',s_dyasf,m);if(nun)return nun;return un}=0A=
function s_gs(un){un=3Dun.toLowerCase()=0A=
var dyas=3Ds_gg('dynamicAccountSelection'),dyal=3Ds_gg(=0A=
'dynamicAccountList'),dyam=3Ds_gg('dynamicAccountMatch');if(dyas&&dyal)=0A=
un=3Ds_dyas(un,dyal,dyam);=0A=
s_un=3Dun;var trk=3D1,tm=3Dnew Date,sed=3DMath&&Math.random?Math.floor(=0A=
Math.random()*10000000000000):tm.getTime(),sess=3D's'+Math.floor(=0A=
tm.getTime()/10800000)%10+sed,yr=3Dtm.getYear(),t,ta=3D'',q=3D'',qs=3D'';=
yr=3D=0A=
yr<1900?yr+1900:yr;t=3Dtm.getDate()+'/'+tm.getMonth()+'/'+yr+' '=0A=
+tm.getHours()+':'+tm.getMinutes()+':'+tm.getSeconds()+' '+tm.getDay()=0A=
+' '+tm.getTimezoneOffset();if(!s_q){var =
tfs=3Ds_gtfs(),tl=3Dtfs.location,=0A=
r=3Dtfs.document.referrer,s=3D'',c=3D'',v=3D'',p=3D'',bw=3D'',bh=3D'',j=3D=
'1.0',g=3D=0A=
s_wd.location,k=3Ds_c_w('s_cc','true',0)?'Y':'N',hp=3D'',ct=3D'',iepl=3Ds=
_gg(=0A=
'iePlugins'),pn=3D0,ps;if(s_apv>=3D4)s=3Dscreen.width+'x'+screen.height;i=
f(=0A=
s_isns||s_isopera){if(s_apv>=3D3){j=3D'1.1';v=3Ds_n.javaEnabled()?'Y':'N'=0A=
if(s_apv>=3D4){j=3D'1.2';c=3Dscreen.pixelDepth;bw=3Ds_wd.innerWidth;bh=3D=0A=
s_wd.innerHeight;if(s_apv>=3D4.06)j=3D'1.3'}}s_pl=3Ds_n.plugins}else if(=0A=
s_isie){if(s_apv>=3D4){v=3Ds_n.javaEnabled()?'Y':'N';j=3D'1.2';c=3D=0A=
screen.colorDepth;if(s_apv>=3D5){bw=3Ds_d.documentElement.offsetWidth;bh=3D=0A=
s_d.documentElement.offsetHeight;j=3D'1.3';if(!s_ismac&&s_d.body){=0A=
s_d.body.addBehavior("#default#homePage");hp=3Ds_d.body.isHomePage(tl)?=0A=
"Y":"N";s_d.body.addBehavior("#default#clientCaps");ct=3D=0A=
s_d.body.connectionType;if(iepl){s_pl=3Dnew Array;s_pt(iepl,',',s_iepf,=0A=
'');}}}}else r=3D'';if(!s_pl&&iepl)s_pl=3Ds_n.plugins}if(s_pl)while(pn<=0A=
s_pl.length&&pn<30){ps=3Ds_fl(s_pl[pn].name,100)+';';if(p.indexOf(ps)<0)=0A=
p+=3Dps;pn++}s_q=3D(g?'&g=3D'+s_ape(s_fl(g,255)):'')+(r?'&r=3D'+s_ape(s_f=
l(r,=0A=
255)):'')+(s?'&s=3D'+s_ape(s):'')+(c?'&c=3D'+s_ape(c):'')+(j?'&j=3D'+j:''=
)+(=0A=
v?'&v=3D'+v:'')+(k?'&k=3D'+k:'')+(bw?'&bw=3D'+bw:'')+(bh?'&bh=3D'+bh:'')+=
(ct?=0A=
'&ct=3D'+s_ape(ct):'')+(hp?'&hp=3D'+hp:'')+(s_vb?'&vb=3D'+s_vb:'')+(p?'&p=
=3D'=0A=
+s_ape(p):'')}if(s_gg('usePlugins'))s_wd.s_doPlugins();q+=3D(t?'&t=3D'=0A=
+s_ape(t):'')+s_hav();if(s_lnk||s_eo){var o=3Ds_eo?s_eo:s_lnk;if(!o)=0A=
return '';var =
p=3Ds_wd.s_g_pageName,w=3D1,t=3Ds_ot(o),n=3Ds_oid(o),x=3Do.s_oidt,=0A=
h,l,i,oc;if(s_eo&&o=3D=3Ds_eo){while(o&&!n&&t!=3D'BODY'){o=3Do.parentElem=
ent?=0A=
o.parentElement:o.parentNode;if(!o)return '';t=3Ds_ot(o);n=3Ds_oid(o);x=3D=0A=
o.s_oidt}oc=3Do.onclick?o.onclick.toString():'';if(oc.indexOf("s_gs(")>=3D=0A=
0)return =
''}ta=3Do.target;h=3Do.href?o.href:'';i=3Dh.indexOf('?');h=3Ds_gg(=0A=
'linkLeaveQueryString')||i<0?h:h.substring(0,i);l=3Ds_gg('linkName')?=0A=
s_gg('linkName'):s_ln(h);t=3Ds_gg('linkType')?s_gg('linkType'=0A=
).toLowerCase():s_lt(h);if(t&&(h||l))q+=3D'&pe=3Dlnk_'+(t=3D=3D'd'||t=3D=3D=
'e'?=0A=
s_ape(t):'o')+(h?'&pev1=3D'+s_ape(h):'')+(l?'&pev2=3D'+s_ape(l):'');else=0A=
trk=3D0;if(s_gg('trackInlineStats')){if(!p){p=3Ds_wd.location.href;w=3D0}=
p=3D=0A=
p?s_fl(p,255):'';t=3Ds_ot(o);i=3Do.sourceIndex;if(s_gg('objectID')){n=3D=0A=
s_gg('objectID');x=3D1;i=3D1}if(p&&n&&t)qs=3D'&pid=3D'+s_ape(p)+(w?'&pidt=
=3D'+w:=0A=
'')+'&oid=3D'+s_ape(n)+(x?'&oidt=3D'+x:'')+'&ot=3D'+s_ape(t)+(i?'&oi=3D'+=
i:'')=0A=
}s_wd.s_linkName=3Ds_wd.s_linkType=3Ds_wd.s_objectID=3Ds_lnk=3Ds_eo=3D'';=
if(=0A=
!s_wd.s_disableLegacyVars)s_wd.linkName=3Ds_wd.linkType=3Ds_wd.objectID=3D=
''=0A=
}if(!trk&&!qs)return '';var code=3D'';if(un){if(trk&&s_vs(un,sed))code+=3D=0A=
s_mr(un,sess,q+(qs?qs:s_rq(un)),ta);s_sq(un,trk?'':qs)}else if(=0A=
s_wd.s_unl)for(var unn=3D0;unn<s_wd.s_unl.length;unn++){un=3Ds_wd.s_unl[=0A=
unn];if(trk&&s_vs(un,sed))code+=3Ds_mr(un,sess,q+(qs?qs:s_rq(un)),ta)=0A=
s_sq(un,trk?'':qs)}return code}function s_dc(un){un=3Dun.toLowerCase()=0A=
var dyas=3Ds_gg('dynamicAccountSelection'),dyal=3Ds_gg(=0A=
'dynamicAccountList'),dyam=3Ds_gg('dynamicAccountMatch');if(dyas&&dyal)=0A=
un=3Ds_dyas(un,dyal,dyam);=0A=
s_wds(un);s_ca(un);return s_gs(un)}=0A=
=0A=
// ###################################################=0A=
// CODE CHANGE FOR FILE: PROTOCOL EXCLUSION 6/28/2005=0A=
// ###################################################=0A=
// OLD CODE:=0A=
// s_code=3Ds_dc(s_account);if(s_code)s_d.write(s_code)=0A=
// NEW CODE:=0A=
   if(s_isValid) {  s_code=3Ds_dc(s_account);if(s_code)s_d.write(s_code) =
}=0A=
// END CODE CHANGE=0A=

------=_NextPart_000_009A_01C68309.B57B7870--
