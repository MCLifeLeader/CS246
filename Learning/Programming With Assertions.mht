From: <Saved by Windows Internet Explorer 7>
Subject: Programming With Assertions
Date: Mon, 29 May 2006 10:25:21 -0600
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_01F6_01C6830A.30DCB4C0"
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2900.2869

This is a multi-part message in MIME format.

------=_NextPart_000_01F6_01C6830A.30DCB4C0
Content-Type: text/html;
	charset="Windows-1252"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>Programming With Assertions</TITLE>
<META http-equiv=3DContent-Type content=3D"text/html; =
charset=3Dwindows-1252">
<META content=3Dreference name=3Dcollection>
<META content=3D"MSHTML 6.00.5346.5" name=3DGENERATOR></HEAD>
<BODY bgColor=3D#ffffff>
<TABLE width=3D"100%" summary=3Dlayout border=3D0>
  <TBODY>
  <TR>
    <TD width=3D60><IMG height=3D88 alt=3DJava=20
      =
src=3D"http://java.sun.com/j2se/1.4.2/docs/images/javalogo52x88.gif"=20
      width=3D52 border=3D0> </TD>
    <TD>
      <DIV align=3Dcenter>
      <H1>Programming With Assertions</H1></DIV></TD>
    <TD vAlign=3Dtop align=3Dright><FONT size=3D-1><A=20
      =
href=3D"http://java.sun.com/j2se/1.4.2/docs/index.html">Documentation=20
      Contents</A> </FONT></TD></TR></TBODY></TABLE>
<HR>

<P>An <I>assertion</I> is a statement in the Java<FONT=20
size=3D-1><SUP>TM</SUP></FONT> programming language that enables you to =
test your=20
assumptions about your program. For example, if you write a method that=20
calculates the speed of a particle, you might assert that the calculated =
speed=20
is less than the speed of light.=20
<P>Each assertion contains a boolean expression that you believe will be =
true=20
when the assertion executes. If it is not true, the system will throw an =
error.=20
By verifying that the boolean expression is indeed true, the assertion =
confirms=20
your assumptions about the behavior of your program, increasing your =
confidence=20
that the program is free of errors.=20
<P>Experience has shown that writing assertions while programming is one =
of the=20
quickest and most effective ways to detect and correct bugs. As an added =

benefit, assertions serve to document the inner workings of your =
program,=20
enhancing maintainability.=20
<P>This document shows you how to program with assertions. It covers the =
topics:=20

<UL>
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#intro"=
>Introduction</A>=20

  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#usage"=
>Putting=20
  Assertions Into Your Code</A>=20
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#compil=
ing">Compiling=20
  Files That Use Assertions</A>=20
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#enable=
-disable">Enabling=20
  and Disabling Assertions</A>=20
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#compat=
ibility">Compatibility=20
  With Existing Programs</A>=20
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#design=
-faq">Design=20
  FAQ</A> </LI></UL>
<P>=20
<HR>
<A name=3Dintro>
<H2>Introduction</H2></A>
<P>The assertion statement has two forms. The first, simpler form is: =
<PRE>    assert <VAR>Expression<SUB>1</SUB></VAR> ;</PRE>where=20
<VAR>Expression<FONT size=3D-1><SUB>1</SUB></FONT></VAR> is a =
<CODE>boolean</CODE>=20
expression. When the system runs the assertion, it evaluates=20
<VAR>Expression<FONT size=3D-1><SUB>1</SUB></FONT></VAR> and if it is=20
<CODE>false</CODE> throws an <A=20
href=3D"http://java.sun.com/j2se/1.4.2/docs/api/java/lang/AssertionError.=
html"><CODE>AssertionError</CODE></A>=20
with no detail message.=20
<P>The second form of the assertion statement is: <PRE>    assert =
<VAR>Expression<SUB>1</SUB></VAR> : <VAR>Expression<SUB>2</SUB></VAR> =
;</PRE>
<P>where:=20
<UL>
  <LI><VAR>Expression<FONT size=3D-1><SUB>1</SUB></FONT></VAR> is a=20
  <CODE>boolean</CODE> expression.=20
  <LI><VAR>Expression<FONT size=3D-1><SUB>2</SUB></FONT></VAR> is an =
expression=20
  that has a value. (It cannot be an invocation of a method that is =
declared=20
  <CODE>void</CODE>.) </LI></UL>
<P>Use this version of the <CODE>assert</CODE> statement to provide a =
detail=20
message for the <CODE>AssertionError</CODE>. The system passes the value =
of=20
<VAR>Expression<FONT size=3D-1><SUB>2</SUB></FONT></VAR> to the =
appropriate=20
<CODE>AssertionError</CODE> constructor, which uses the string =
representation of=20
the value as the error's detail message.=20
<P>The purpose of the detail message is to capture and communicate the =
details=20
of the assertion failure. The message should allow you to diagnose and=20
ultimately fix the error that led the assertion to fail. Note that the =
detail=20
message is <I>not</I> a user-level error message, so it is generally =
unnecessary=20
to make these messages understandable in isolation, or to =
internationalize them.=20
The detail message is meant to be interpreted in the context of a full =
stack=20
trace, in conjunction with the source code containing the failed =
assertion.=20
<P>Like all uncaught exceptions, assertion failures are generally =
labeled in the=20
stack trace with the file and line number from which they were thrown. =
The=20
second form of the assertion statement should be used in preference to =
the first=20
only when the program has some additional information that might help =
diagnose=20
the failure. For example, if <VAR>Expression<SUB>1</SUB></VAR> involves =
the=20
relationship between two variables <CODE>x</CODE> and <CODE>y</CODE>, =
the second=20
form should be used. Under these circumstances, a reasonable candidate =
for=20
<VAR>Expression<SUB>2</SUB></VAR> would be <CODE>"x: " + x + ", y: " + =
y</CODE>.=20

<P>In some cases <VAR>Expression<FONT =
size=3D-1><SUB>1</SUB></FONT></VAR> may be=20
expensive to evaluate. For example, suppose you write a method to find =
the=20
minimum element in an unsorted list, and you add an assertion to verify =
that the=20
selected element is indeed the minimum. The work done by the assert will =
be at=20
least as expensive as the work done by the method itself. To ensure that =

assertions are not a performance liability in deployed applications, =
assertions=20
can be enabled or disabled when the program is started, and are disabled =
by=20
default. Disabling assertions eliminates their performance penalty =
entirely.=20
Once disabled, they are essentially equivalent to <I>empty =
statements</I> in=20
semantics and performance. See <A=20
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#enable=
-disable">Enabling=20
and Disabling Assertions</A> for more information.=20
<P>The addition of the <CODE>assert</CODE> keyword to the Java =
programming=20
language has implications for existing code. See <A=20
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#compat=
ibility">Compatibility=20
With Existing Programs</A> for more information.=20
<P>=20
<HR>
<A name=3Dusage>
<H2>Putting Assertions Into Your Code</H2></A>
<P>There are many situations where it is good to use assertions. This =
section=20
covers some of them:=20
<UL>
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#usage-=
invariants">Internal=20
  Invariants</A>=20
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#usage-=
control">Control-Flow=20
  Invariants</A>=20
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#usage-=
conditions">Preconditions,=20
  Postconditions, and Class Invariants</A> </LI></UL>
<P>There are also a few situations where you should <I>not</I> use them: =

<UL>
  <LI>Do <I>not</I> use assertions for argument checking in public =
methods.=20
  <P>Argument checking is typically part of the published specifications =
(or=20
  <I>contract</I>) of a method, and these specifications must be obeyed =
whether=20
  assertions are enabled or disabled. Another problem with using =
assertions for=20
  argument checking is that erroneous arguments should result in an =
appropriate=20
  runtime exception (such as <CODE>IllegalArgumentException</CODE>,=20
  <CODE>IndexOutOfBoundsException</CODE>, or =
<CODE>NullPointerException</CODE>).=20
  An assertion failure will not throw an appropriate exception. </P>
  <LI>Do <I>not</I> use assertions to do any work that your application =
requires=20
  for correct operation.=20
  <P>Because assertions may be disabled, programs must not assume that =
the=20
  boolean expression contained in an assertion will be evaluated. =
Violating this=20
  rule has dire consequences. For example, suppose you wanted to remove =
all of=20
  the null elements from a list <CODE>names</CODE>, and knew that the =
list=20
  contained one or more nulls. It would be wrong to do this: <PRE>    =
<B>// Broken! - action is contained in assertion</B>
    assert names.remove(null);
</PRE>The program would work fine when asserts were enabled, but would =
fail=20
  when they were disabled, as it would no longer remove the null =
elements from=20
  the list. The correct idiom is to perform the action before the =
assertion and=20
  then assert that the action succeeded: <PRE>    <B>// Fixed - action =
precedes assertion</B>
    boolean nullsRemoved =3D names.remove(null);
    assert nullsRemoved;  // Runs whether or not asserts are enabled
</PRE>As a rule, the expressions contained in assertions should be free =
of=20
  <I>side effects</I>: evaluating the expression should not affect any =
state=20
  that is visible after the evaluation is complete. One exception to =
this rule=20
  is that assertions can modify state that is used only from within =
other=20
  assertions. <A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#comple=
xpostconditions">An=20
  idiom that makes use of this exception</A> is presented later in this=20
  document. </LI></UL>
<P>&nbsp; <A name=3Dusage-invariants>
<H3>Internal Invariants</H3></A>
<P>Before assertions were available, many programmers used comments to =
indicate=20
their assumptions concerning a program's behavior. For example, you =
might have=20
written something like this to explain your assumption about an=20
<CODE>else</CODE> clause in a multiway if-statement: <PRE>    if (i % 3 =
=3D=3D 0) {
        ...
    } else if (i % 3 =3D=3D 1) {
        ...
    } else { <B>// We know (i % 3 =3D=3D 2)</B>
        ...
    }</PRE>
<P>You should now <B>use an assertion whenever you would have written a =
comment=20
that asserts an invariant</B>. For example, you should rewrite the =
previous=20
if-statement like this: <PRE>    if (i % 3 =3D=3D 0) {
        ...
    } else if (i % 3 =3D=3D 1) {
        ...
    } else {
        <B>assert i % 3 =3D=3D 2 : i;</B>
        ...
    }</PRE>
<P>Note, incidentally, that the assertion in the above example may fail =
if=20
<CODE>i</CODE> is negative, as the <CODE>%</CODE> operator is not a true =

<I>modulus</I> operator, but computes the <I>remainder</I>, which may be =

negative.=20
<P>Another good candidate for an assertion is a <CODE>switch</CODE> =
statement=20
with no <CODE>default</CODE> case. The absence of a <CODE>default</CODE> =
case=20
typically indicates that a programmer believes that one of the cases =
will always=20
be executed. The assumption that a particular variable will have one of =
a small=20
number of values is an invariant that should be checked with an =
assertion. For=20
example, suppose the following <CODE>switch</CODE> statement appears in =
a=20
program that handles playing cards: <PRE>    switch(suit) {
      case Suit.CLUBS:
        ...
        break;

      case Suit.DIAMONDS:
        ...
        break;

      case Suit.HEARTS:
        ...
        break;

      case Suit.SPADES:
        ...
    } </PRE>
<P>It probably indicates an assumption that the <CODE>suit</CODE> =
variable will=20
have one of only four values. To test this assumption, you should add =
the=20
following default case: <PRE>      default:
        assert false : suit; </PRE>
<P>If the <CODE>suit</CODE> variable takes on another value and =
assertions are=20
enabled, the assert will fail and an <CODE>AssertionError</CODE> will be =
thrown.=20

<P>An acceptable alternative is:<PRE>      default:
        throw new AssertionError(suit); </PRE><PRE></PRE>This =
alternative offers protection even if assertions are disabled,=20
but the extra protection adds no cost: the <CODE>throw</CODE> statement =
won't=20
execute unless the program has failed. Moreover, the alternative is =
legal under=20
some circumstances where the <CODE>assert</CODE> statement is not. If =
the=20
enclosing method returns a value, each case in the <CODE>switch</CODE> =
statement=20
contains a <CODE>return</CODE> statement, and no <CODE>return</CODE> =
statement=20
follows the <CODE>switch</CODE> statement, then it would cause a syntax =
error to=20
add a default case with an assertion. (The method would return without a =
value=20
if no case matched and assertions were disabled.)=20
<P>&nbsp; <A name=3Dusage-control>
<H3>Control-Flow Invariants</H3></A>
<P>The previous example not only tests an invariant, it also checks an=20
assumption about the application's flow of control. The author of the =
original=20
<CODE>switch</CODE> statement probably assumed not only that the=20
<CODE>suit</CODE> variable would always have one of four values, but =
also that=20
one of the four cases would always be executed. It points out another =
general=20
area where you should use assertions: <B>place an assertion at any =
location you=20
assume will not be reached</B>. The assertions statement to use is: =
<PRE>    assert false; </PRE>
<P>For example, suppose you have a method that looks like this: <PRE>    =
void foo() {
        for (...) {
            if (...)
                return;
        }
        <B>// Execution should never reach this point!!!</B>
    } </PRE>
<P>Replace the final comment so that the code now reads: <PRE>    void =
foo() {
        for (...) {
            if (...)
                return;
        }
        <B>assert false; // Execution should never reach this point!</B>
    } </PRE>
<P></P>
<P>
<HR align=3Dleft width=3D"50%">
<B>Note: </B>Use this technique with discretion. If a statement is =
unreachable=20
as defined in the Java Language Specification ( <A=20
href=3D"http://java.sun.com/docs/books/jls/second_edition/html/statements=
.doc.html#236365">JLS=20
14.20</A>), you will get a compile time error if you try to assert that =
it is=20
not reached. Again, an acceptable alternative is simply to throw an=20
<CODE>AssertionError</CODE>.=20
<HR align=3Dleft width=3D"50%">

<P></P>
<P>&nbsp; <A name=3Dusage-conditions>
<H3>Preconditions, Postconditions, and Class Invariants</H3></A>
<P>While the assert construct is not a full-blown =
<I>design-by-contract</I>=20
facility, it can help support an informal design-by-contract style of=20
programming. This section shows you how to use asserts for:=20
<UL>
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#precon=
ditions">Preconditions</A>=20
  =97 what must be true when a method is invoked.=20
  <UL>
    <LI><A=20
    =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#usage-=
adv-locks">Lock-Status=20
    Preconditions</A> =97 preconditions concerning whether or not a =
given lock is=20
    held. </LI></UL>
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#postco=
nditions">Postconditions</A>=20
  =97 what must be true after a method completes successfully.=20
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#class-=
invariants">Class=20
  invariants</A> =97 what must be true about each instance of a class. =
</LI></UL>
<P>&nbsp; <A name=3Dpreconditions></A>
<H4>Preconditions</H4>
<P>By convention, preconditions on <I>public</I> methods are enforced by =

explicit checks that throw particular, specified exceptions. For =
example: <PRE>    /**
     * Sets the refresh rate.
     *
     * @param  rate refresh rate, in frames per second.
     * @throws IllegalArgumentException if rate &lt;=3D 0 or
     *          rate &gt; MAX_REFRESH_RATE.
     */
     public void setRefreshRate(int rate) {
         // <B>Enforce specified precondition in public method</B>
         if (rate &lt;=3D 0 || rate &gt; MAX_REFRESH_RATE)
             throw new IllegalArgumentException("Illegal rate: " + =
rate);

         setRefreshInterval(1000/rate);
     } </PRE>
<P>This convention is unaffected by the addition of the =
<CODE>assert</CODE>=20
construct. <B>Do not use assertions to check the parameters of a public=20
method.</B> An assert is inappropriate because the method guarantees =
that it=20
will always enforce the argument checks. It must check its arguments =
whether or=20
not assertions are enabled. Further, the <CODE>assert</CODE> construct =
does not=20
throw an exception of the specified type. It can throw only an=20
<CODE>AssertionError</CODE>.=20
<P>You can, however, use an assertion to test a <I>nonpublic</I> =
method's=20
precondition that you believe will be true no matter what a client does =
with the=20
class. For example, an assertion <I>is</I> appropriate in the following =
"helper=20
method" that is invoked by the previous method: <PRE>   /**
    * Sets the refresh interval (which must correspond to a legal frame =
rate).
    *
    * @param  interval refresh interval in milliseconds.
    */
    <B>private</B> void setRefreshInterval(int interval) {
        <B>// Confirm adherence to precondition in nonpublic method</B>
        assert interval &gt; 0 &amp;&amp; interval &lt;=3D =
1000/MAX_REFRESH_RATE : interval;

        ... // Set the refresh interval
    } </PRE>
<P>Note, the above assertion will fail if <CODE>MAX_REFRESH_RATE</CODE> =
is=20
greater than 1000 and the client selects a refresh rate greater than =
1000. This=20
would, in fact, indicate a bug in the library!=20
<P>&nbsp; <A name=3Dusage-adv-locks>
<H5>Lock-Status Preconditions</H5></A>
<P>Classes designed for multithreaded use often have non-public methods =
with=20
preconditions relating to whether or not some lock is held. For example, =
it is=20
not uncommon to see something like this: <PRE>   private Object[] a;

   public synchronized int find(Object key) {
      return find(key, a, 0, a.length);
   }

   <B>// Recursive helper method - always called with a lock on this =
object</B>
   private int find(Object key, Object[] arr, int start, int len) {
       ...
   } </PRE>
<P>A static method called <CODE>holdsLock</CODE> has been added to the=20
<CODE>Thread</CODE> class to test whether the current thread holds the =
lock on a=20
specified object. This method can be used in combination with an=20
<CODE>assert</CODE> statement to supplement a comment describing a =
lock-status=20
precondition, as shown in the following example: <PRE>    // Recursive =
helper method - always called with a lock on this.
    private int find(Object key, Object[] arr, int start, int len) {
        <B>assert Thread.holdsLock(this); // lock-status assertion </B>
        ...
    } </PRE>
<P>Note that it is also possible to write a lock-status assertion =
asserting that=20
a given lock <I>isn't</I> held.=20
<P>&nbsp; <A name=3Dpostconditions></A>
<H4>Postconditions</H4>
<P>You can test postcondition with assertions in both public and =
nonpublic=20
methods. For example, the following public method uses an =
<CODE>assert</CODE>=20
statement to check a post condition: <PRE>    /**
     * Returns a BigInteger whose value is (this<SUP>-1</SUP> mod m).
     *
     * @param  m the modulus.
     * @return this<SUP>-1</SUP> mod m.
     * @throws ArithmeticException  m &lt;=3D 0, or this BigInteger
     *         has no multiplicative inverse mod m (that is, this =
BigInteger
     *         is not <I>relatively prime</I> to m).
     */
    public BigInteger modInverse(BigInteger m) {
        if (m.signum &lt;=3D 0)
            throw new ArithmeticException("Modulus not positive: " + m);

        ... // Do the computation

        <B>assert this.multiply(result).mod(m).equals(ONE) : this;</B>
        return result;
    }
</PRE>
<P><A name=3Dcomplexpostconditions></A>Occasionally it is necessary to =
save some=20
data prior to performing a computation in order to check a =
postcondition. You=20
can do this with two <CODE>assert</CODE> statements and a simple inner =
class=20
that saves the state of one or more variables so they can be checked (or =

rechecked) after the computation. For example, suppose you have a piece =
of code=20
that looks like this: <PRE>    void foo(int[] array) {
        // Manipulate array
        ...

        // At this point, array will contain exactly the ints that it =
did
        // prior to manipulation, in the same order.
    }
</PRE>
<P>Here is how you could modify the above method to turn the textual =
assertion=20
of a postcondition into a functional one: <PRE>    void foo(final int[] =
array) {

        <B>// Inner class that saves state and performs final =
consistency check</B>
        class DataCopy {
            private int[] arrayCopy;

            DataCopy() { arrayCopy =3D (int[]) array.clone(); }

            boolean isConsistent() { return Arrays.equals(array, =
arrayCopy); }
        }

        DataCopy copy =3D null;

        <B>// Always succeeds; has side effect of saving a copy of =
array</B>
        assert ((copy =3D new DataCopy()) !=3D null);

        ... // Manipulate array

        <B>// Ensure array has same ints in same order as before =
manipulation.</B>
        assert copy.isConsistent();
     } </PRE>
<P>You can easily generalize this idiom to save more than one data =
field, and to=20
test arbitrarily complex assertions concerning pre-computation and=20
post-computation values.=20
<P>You might be tempted to replace the first assert statement (which is =
executed=20
solely for its side-effect) by the following, more expressive statement: =
<PRE>    copy =3D new DataCopy(); </PRE>
<P>Don't make this replacement. The statement above would copy the array =
whether=20
or not asserts were enabled, violating the principle that assertions =
should have=20
no cost when disabled.=20
<P>&nbsp; <A name=3Dclass-invariants></A>
<H4>Class Invariants</H4>A class invariants is a type of <A=20
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#usage-=
invariants">internal=20
invariant</A> that applies to every instance of a class at all times, =
except=20
when an instance is in transition from one consistent state to another. =
A class=20
invariant can specify the relationships among multiple attributes, and =
should be=20
true before and after any method completes. For example, suppose you =
implement a=20
balanced tree data structure of some sort. A class invariant might be =
that the=20
tree is balanced and properly ordered.=20
<P>The assertion mechanism does not enforce any particular style for =
checking=20
invariants. It is sometimes convenient, though, to combine the =
expressions that=20
check required constraints into a single internal method that can be =
called by=20
assertions. Continuing the balanced tree example, it might be =
appropriate to=20
implement a private method that checked that the tree was indeed =
balanced as per=20
the dictates of the data structure: <PRE>    // Returns true if this =
tree is properly balanced
    private boolean balanced() {
        ...
    }
</PRE>
<P>Because this method checks a constraint that should be true before =
and after=20
any method completes, each public method and constructor should contain =
the=20
following line immediately prior to its return: <PRE>    assert =
balanced(); </PRE>
<P>It is generally unnecessary to place similar checks at the head of =
each=20
public method unless the data structure is implemented by native =
methods. In=20
this case, it is possible that a memory corruption bug could corrupt a =
"native=20
peer" data structure in between method invocations. A failure of the =
assertion=20
at the head of such a method would indicate that such memory corruption =
had=20
occurred. Similarly, it may be advisable to include class invariant =
checks at=20
the heads of methods in classes whose state is modifiable by other =
classes.=20
(Better yet, design classes so that their state is not directly visible =
to other=20
classes!)=20
<P>&nbsp; <A name=3Dusage-advanced>
<H3>Advanced Uses</H3></A>The following sections discuss topics that =
apply only=20
to resource-constrained devices and to systems where asserts must not be =

disabled in the field. If you have no interest in these topics, skip to =
the next=20
section, <A=20
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#compil=
ing">"Compiling=20
Files that Use Assertions"</A>.=20
<P>&nbsp; <A name=3Dusage-adv-removing>
<H4>Removing all Trace of Assertions from Class Files</H4></A>
<P>Programmers developing applications for resource-constrained devices =
may wish=20
to strip assertions out of class files entirely. While this makes it =
impossible=20
to enable assertions in the field, it also reduces class file size, =
possibly=20
leading to improved class loading performance. In the absence of a high =
quality=20
JIT, it could lead to decreased footprint and improved runtime =
performance.=20
<P>The assertion facility offers no direct support for stripping =
assertions out=20
of class files. The assert statement may, however, be used in =
conjunction with=20
the "conditional compilation" idiom described in <A=20
href=3D"http://java.sun.com/docs/books/jls/second_edition/html/statements=
.doc.html#236365">JLS=20
14.20</A>, enabling the compiler to eliminate all traces of these =
asserts from=20
the class files that it generates: <PRE>    static final boolean asserts =
=3D ... ; // false to eliminate asserts

    if (asserts)
        assert &lt;expr&gt; ; </PRE>
<P>&nbsp; <A name=3Dusage-adv-requiring>
<H4>Requiring that Assertions are Enabled</H4></A>
<P>Programmers of certain critical systems might wish to ensure that =
assertions=20
are not disabled in the field. The following static initialization idiom =

prevents a class from being initialized if its assertions have been =
disabled: <PRE>    static {
        boolean assertsEnabled =3D false;
        assert assertsEnabled =3D true; // <B>Intentional side =
effect!!!</B>
        if (!assertsEnabled)
            throw new RuntimeException("Asserts must be enabled!!!");
    } </PRE>
<P>Put this static-initializer at the top of your class.=20
<P>=20
<HR>
<A name=3Dcompiling>
<H2>Compiling Files That Use Assertions</H2></A>
<P>In order for the <CODE>javac</CODE> compiler to accept code =
containing=20
assertions, you must use the <CODE>-source&nbsp;1.4</CODE> command-line =
option=20
as in this example: <PRE>    javac <B>-source 1.4</B> MyClass.java =
</PRE>This flag is necessary so=20
as not to cause source <A=20
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#compat=
ibility">compatibility</A>=20
problems.=20
<P>=20
<HR>

<H2><A name=3Denable-disable>Enabling and Disabling Assertions</A></H2>
<P>By default, assertions are disabled at runtime. Two command-line =
switches=20
allow you to selectively enable or disable assertions.=20
<P>To enable assertions at various granularities, use the=20
<NOBR><CODE>-enableassertions</CODE></NOBR>, or =
<NOBR><CODE>-ea</CODE></NOBR>,=20
switch. To disable assertions at various granularities, use the=20
<NOBR><CODE>-disableassertions</CODE></NOBR>, or =
<NOBR><CODE>-da</CODE></NOBR>,=20
switch. You specify the granularity with the arguments that you provide =
to the=20
switch:=20
<UL><A name=3Darg-list></A>
  <LI>no arguments <BR>&nbsp;&nbsp;&nbsp;Enables or disables assertions =
in all=20
  classes except system classes.=20
  <LI><I>packageName</I><CODE>...</CODE> <BR>&nbsp;&nbsp;&nbsp;Enables =
or=20
  disables assertions in the named package and any subpackages.=20
  <LI><CODE>...</CODE><BR>&nbsp;&nbsp;&nbsp;Enables or disables =
assertions in=20
  the unnamed package in the current working directory.=20
  <LI><I>className</I><BR>&nbsp;&nbsp;&nbsp;Enables or disables =
assertions in=20
  the named class </LI></UL>
<P>For example, the following command runs a program, =
<CODE>BatTutor</CODE>,=20
with assertions enabled in only package <CODE>com.wombat.fruitbat</CODE> =
and its=20
subpackages: <PRE>    java -ea:com.wombat.fruitbat... BatTutor</PRE>
<P>If a single command line contains multiple instances of these =
switches, they=20
are processed in order before loading any classes. For example, the =
following=20
command runs the <CODE>BatTutor</CODE> program with assertions enabled =
in=20
package <CODE>com.wombat.fruitbat</CODE> but disabled in class=20
<CODE>com.wombat.fruitbat.Brickbat</CODE>: <PRE>    java =
-ea:com.wombat.fruitbat... -da:com.wombat.fruitbat.Brickbat BatTutor =
</PRE>
<P>The above switches apply to all class loaders. With one exception, =
they also=20
apply to <I>system classes</I> (which do not have an explicit class =
loader). The=20
exception concerns the switches with no arguments, which (as indicated =
above) do=20
not apply to system classes. This behavior makes it easy to enable =
asserts in=20
all classes except for system classes, which is commonly desirable.=20
<P>To enable assertions in all system classes, use a different switch:=20
<NOBR><CODE>-enablesystemassertions</CODE></NOBR>, or=20
<NOBR><CODE>-esa</CODE>.</NOBR> Similarly, to disable assertions in =
system=20
classes, use <NOBR><CODE>-disablesystemassertions</CODE></NOBR>, or=20
<NOBR><CODE>-dsa</CODE>.</NOBR>=20
<P>For example, the following command runs the <CODE>BatTutor</CODE> =
program=20
with assertions enabled in system classes, as well as in the=20
<CODE>com.wombat.fruitbat</CODE> package and its subpackages: <PRE>    =
java -esa -ea:com.wombat.fruitbat... </PRE>
<P>The assertion status of a class (enabled or disabled) is set at the =
time it=20
is initialized, and does not change. There is, however, one corner case =
that=20
demands special treatment. It is possible, though generally not =
desirable, to=20
execute methods or constructors prior to initialization. This can happen =
when a=20
class hierarchy contains a circularity in its static initialization.=20
<P>If an <TT>assert</TT> statement executes before its class is =
initialized, the=20
execution must behave as if assertions were enabled in the class. This =
topic is=20
discussed in detail in <A=20
href=3D"http://java.sun.com/docs/books/jls/assert-spec.html#semantics">th=
e=20
assertions specification</A>.=20
<HR>
<A name=3Dcompatibility>
<H2>Compatibility With Existing Programs</H2></A>
<P>The addition of the <CODE>assert</CODE> keyword to the Java =
programming=20
language does not cause any problems with preexisting binaries=20
(<CODE>.class</CODE> files). If you try to compile an application that =
uses=20
<CODE>assert</CODE> as an identifier, however, you will receive a =
warning or=20
error message. In order to ease the transition from a world where=20
<CODE>assert</CODE> is a legal identifier to one where it isn't, the =
compiler=20
supports two modes of operation in this release:=20
<UL>
  <LI><B>source mode 1.3</B> (default) =97 the compiler accepts programs =
that use=20
  <CODE>assert</CODE> as an identifier, but issues warnings. In this =
mode,=20
  programs are <I>not</I> permitted to use the <CODE>assert</CODE> =
statement.=20
  <LI><B>source mode 1.4</B> =97 the compiler generates an error message =
if the=20
  program uses <CODE>assert</CODE> as an identifier. In this mode, =
programs=20
  <I>are</I> permitted to use the <CODE>assert</CODE> statement. =
</LI></UL>
<P>Unless you specifically request source mode 1.4 with the =
<CODE>-source=20
1.4</CODE> flag, the compiler operates in source mode 1.3. <I>If you =
forget to=20
use this this flag, programs that use the new <CODE>assert</CODE> =
statement will=20
not compile</I>. Having the compiler use the old semantics as its =
default=20
behavior (that is, allowing <CODE>assert</CODE> to be used as an =
identifier) was=20
done for maximal source compatibility. Source mode 1.3 is likely to be =
phased=20
out over time.=20
<P>=20
<HR>
<A name=3Ddesign-faq>
<H2>Design FAQ</H2></A>
<P>Here is a collection of frequently asked questions concerning the =
design of=20
the assertion facility.=20
<UL>
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#design=
-faq-general">General=20
  Questions</A>=20
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#design=
-faq-compat">Compatibility</A>=20

  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#design=
-faq-ss">Syntax=20
  and Semantics</A>=20
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#design=
-faq-error">The=20
  <CODE>AssertionError</CODE> Class</A>=20
  <LI><A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#design=
-faq-enable-disable">Enabling=20
  and Disabling Assertions</A> </LI></UL>
<P>&nbsp; <A name=3Ddesign-faq-general>
<H3>General Questions</H3></A>
<OL><B>
  <LI>Why provide an assertion facility, given that one can program =
assertions=20
  atop the Java programming language with no special support?</B>=20
  <P>Although ad hoc implementations are possible, they are of necessity =
either=20
  ugly (requiring an <CODE>if</CODE> statement for each assertion) or=20
  inefficient (evaluating the condition even if assertions are =
disabled).=20
  Further, each ad hoc implementation has its own means of enabling and=20
  disabling assertions, which lessens the utility of these =
implementations,=20
  especially for debugging in the field. As a result of these =
shortcomings,=20
  assertions have never become a part of the culture among engineers =
using the=20
  Java programming language. Adding assertion support to the platform =
stands a=20
  good chance of rectifying this situation.=20
  <P> </P>
  <LI><B>Why does this facility justify a language change, as opposed to =
a=20
  library solution?</B>=20
  <P>We recognize that a language change is a serious effort, not to be=20
  undertaken lightly. The library approach was considered. It was, =
however,=20
  deemed essential that the runtime cost of assertions be negligible if =
they are=20
  disabled. In order to achieve this with a library, the programmer is =
forced to=20
  hard-code each assertion as an <CODE>if</CODE> statement. Many =
programmers=20
  would not do this. Either they would omit the if statement and =
performance=20
  would suffer, or they would ignore the facility entirely. Note also =
that=20
  assertions were contained in James Gosling's original specification =
for the=20
  Java programming language. Assertions were removed from the Oak =
specification=20
  because time constraints prevented a satisfactory design and =
implementation.=20
  <P> </P>
  <LI><B>Why not provide a full-fledged <I>design-by-contract</I> =
facility with=20
  preconditions, postconditions and class invariants, like the one in =
the Eiffel=20
  programming language?</B>=20
  <P>We considered providing such a facility, but were unable to =
convince=20
  ourselves that it is possible to graft it onto the Java programming =
language=20
  without massive changes to the Java platform libraries, and massive=20
  inconsistencies between old and new libraries. Further, we were not =
convinced=20
  that such a facility would preserve the simplicity that is the =
hallmark of the=20
  Java programming language. On balance, we came to the conclusion that =
a simple=20
  boolean assertion facility was a fairly straight-forward solution and =
far less=20
  risky. It's worth noting that adding a boolean assertion facility to =
the=20
  language doesn't preclude adding a full-fledged design-by-contract =
facility at=20
  some time in the future.=20
  <P>The simple assertion facility does enable a limited form of <A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#usage-=
conditions">design-by-contract=20
  style programming</A>. The <CODE>assert</CODE> statement is =
appropriate for=20
  nonpublic precondition, postcondition and class invariant checking. =
Public=20
  precondition checking should still be performed by checks inside =
methods that=20
  result in particular, documented exceptions, such as=20
  <CODE>IllegalArgumentException</CODE> and =
<CODE>IllegalStateException</CODE>.=20
  <P> </P>
  <LI><B>In addition to boolean assertions, why not provide an =
assert-like=20
  construct to suppress the execution of an entire block of code if =
assertions=20
  are disabled?</B>=20
  <P>Providing such a construct would encourage programmers to put =
complex=20
  assertions inline, when they are better relegated to separate methods. =

  </P></LI></OL>
<P>&nbsp; <A name=3Ddesign-faq-compat>
<H3>Compatibility</H3></A>
<OL>
  <P>
  <LI><B>Won't the new keyword cause compatibility problems with =
existing=20
  programs that use <CODE>assert</CODE> as an identifier?</B>=20
  <P>Yes, for source files. (Binaries for classes that use =
<CODE>assert</CODE>=20
  as an identifier will continue to work fine.) To ease the transition, =
we=20
  implemented <A=20
  =
href=3D"http://java.sun.com/j2se/1.4.2/docs/guide/lang/assert.html#compat=
ibility">a=20
  strategy</A> whereby developers can continue using <CODE>assert</CODE> =
as an=20
  identifier during a transitional period.
  <P> </P>
  <LI><B>Doesn't this facility produce class files that cannot be run =
against=20
  older JREs?</B>=20
  <P>Yes. Class files will contain calls to the new <TT>ClassLoader</TT> =
and=20
  <TT>Class</TT> methods, such as <TT>desiredAssertionStatus</TT>. If a =
class=20
  file containing calls to these methods is run against an older JRE =
(whose=20
  <TT>ClassLoader</TT> class doesn't define the methods), the program =
will fail=20
  at run time, throwing a <TT>NoSuchMethodError</TT>. It is generally =
the case=20
  that programs using new facilities are not compatible with older =
releases.=20
  </P></LI></OL>
<P>&nbsp; <A name=3Ddesign-faq-ss>
<H3>Syntax and Semantics</H3></A>
<OL>
  <LI><B>Why allow primitive types in <VAR>Expression<FONT=20
  size=3D1><SUB>2</SUB></FONT></VAR>?</B>=20
  <P>There is no compelling reason to restrict the type of this =
expression.=20
  Allowing arbitrary types provides convenience for developers who, for =
example,=20
  want to associate a unique integer code with each assertion. Further, =
it makes=20
  this expression feel like the argument of=20
  <CODE>System.out.println(...)</CODE>, which is seen as desirable. =
</P></LI></OL>
<P>&nbsp; <A name=3Ddesign-faq-error>
<H3>The AssertionError Class</H3></A>
<OL>
  <LI><B>When an <CODE>AssertionError</CODE> is generated by an assert =
statement=20
  in which <VAR>Expression<FONT size=3D-1><SUB>2</SUB></FONT></VAR> is =
absent, why=20
  isn't the program text of the asserted condition used as the detail =
message=20
  (for example, <NOBR>"<CODE>height &lt; maxHeight</CODE>"</NOBR>)?</B>=20
  <P>While doing so might improve out-of-the-box usefulness of =
assertions in=20
  some cases, the benefit doesn't justify the cost of adding all those =
string=20
  constants to <CODE>.class</CODE> files and runtime images.=20
  <P> </P>
  <LI><B>Why doesn't an <CODE>AssertionError</CODE> allow access to the =
object=20
  that generated it? Similarly, why not pass an arbitrary object from =
the=20
  assertion to the <CODE>AssertionError</CODE> constructor in place of a =
detail=20
  message?</B>=20
  <P>Access to these objects would encourage programmers to attempt to =
recover=20
  from assertion failures, which defeats the purpose of the facility.=20
  <P> </P>
  <LI><B>Why not provide context accessors (like <CODE>getFile</CODE>,=20
  <CODE>getline</CODE>, <CODE>getMethod</CODE>) on=20
  <CODE>AssertionError</CODE>?</B>=20
  <P>This facility is best provided on <CODE>Throwable</CODE>, so it may =
be used=20
  for all throwables, not just just assertion errors. We enhanced=20
  <CODE>Throwable</CODE> with the <CODE>getStackTrace</CODE> method to =
provide=20
  this functionality.=20
  <P> </P>
  <LI><B>Why is <CODE>AssertionError</CODE> a subclass of =
<CODE>Error</CODE>=20
  rather than <CODE>RuntimeException</CODE>?</B>=20
  <P>This issue was controversial. The expert group discussed it at at =
length,=20
  and came to the conclusion that <CODE>Error</CODE> was more =
appropriate to=20
  discourage programmers from attempting to recover from assertion =
failures. It=20
  is, in general, difficult or impossible to localize the source of an =
assertion=20
  failure. Such a failure indicates that the program is operating =
"outside of=20
  known space," and attempts to continue execution are likely to be =
harmful.=20
  Further, convention dictates that methods specify most runtime =
exceptions they=20
  may throw (with <CODE>@throws</CODE> doc comments). It makes little =
sense to=20
  include in a method's specification the circumstances under which it =
may=20
  generate an assertion failure. Such information may be regarded as an=20
  implementation detail, which can change from implementation to =
implementation=20
  and release to release. </P></LI></OL>
<P>&nbsp; <A name=3Ddesign-faq-enable-disable>
<H3>Enabling and Disabling Assertions</H3></A>
<OL>
  <LI><B>Why not provide a compiler flag to completely eliminate =
assertions from=20
  object files?</B>=20
  <P>It is a firm requirement that it be possible to enable assertions =
in the=20
  field, for enhanced serviceability. It would have been possible to =
also permit=20
  developers to eliminate assertions from object files at compile time.=20
  Assertions can contain side effects, though they should not, and such =
a flag=20
  could therefore alter the behavior of a program in significant ways. =
It is=20
  viewed as good thing that there is only one semantics associated with =
each=20
  valid Java program. Also, we want to encourage users to leave asserts =
in=20
  object files so they can be enabled in the field. Finally, the spec =
demands=20
  that assertions behave as if enabled when a class runs before it is=20
  initialized. It would be impossible to offer these semantics if =
assertions=20
  were stripped from the class file. Note, however, that the standard=20
  "conditional compilation idiom" described in JLS 14.20 can be used to =
achieve=20
  this effect for developers who really want it.=20
  <P> </P>
  <LI><B>Why do the commands that enable and disable assertions use =
package-tree=20
  semantics instead of the more traditional package semantics?</B>=20
  <P>Hierarchical control is useful, as programmers really do use =
package=20
  hierarchies to organize their code. For example, package-tree =
semantics allow=20
  assertions to be enabled or disabled in all of Swing at one time.=20
  <P> </P>
  <LI><B>Why does <CODE>setClassAssertionStatus</CODE> return a=20
  <CODE>boolean</CODE> instead of throwing an exception if it is invoked =
when=20
  it's too late to set the assertion status (that is, if the named class =
has=20
  already been initialized)?</B>=20
  <P>No action (other than perhaps a warning message) is necessary or =
desirable=20
  if it's too late to set the assertion status. An exception seems =
unduly=20
  heavyweight.=20
  <P> </P>
  <LI><B>Why not overload a single method name to take the place of=20
  <CODE>setDefaultAssertionStatus</CODE> and=20
  <CODE>setAssertionStatus</CODE>?</B>=20
  <P>Clarity in method naming is for the greater good. Overloading tends =
to=20
  cause confusion.=20
  <P> </P>
  <LI><B>Why not tweak the semantics of <TT>desiredAssertionStatus</TT> =
to make=20
  it more "programmer friendly" by returning the actual assertion status =
if a=20
  class is already initialized?</B>=20
  <P>It's not clear that there would be any use for the resulting =
method. The=20
  method isn't designed for application programmer use, and it seems =
inadvisable=20
  to make it slower and more complex than necessary.=20
  <P> </P>
  <LI><B>Why is there no <CODE>RuntimePermission</CODE> to prevent =
applets from=20
  enabling/disabling assertions?</B>=20
  <P>While applets have no reason to call any of the =
<CODE>ClassLoader</CODE>=20
  methods for modifying assertion status, allowing them to do so seems =
harmless.=20
  At worst, an applet can mount a weak denial-of-service attack by =
enabling=20
  assertions in classes that have yet to be initialized. Moreover, =
applets can=20
  only affect the assert status of classes that are to be loaded by =
class=20
  loaders that the applets can access. There already exists a=20
  <CODE>RuntimePermission</CODE> to prevent untrusted code from gaining =
access=20
  to class loaders (<CODE>getClassLoader</CODE>).=20
  <P> </P>
  <LI><B>Why not provide a construct to query the assert status of the=20
  containing class?</B>=20
  <P>Such a construct would encourage people to inline complex assertion =
code,=20
  which we view as a bad thing.<!-- :=0A=
=0A=
<PRE>    if (assertsEnabled()) {=0A=
        ...=0A=
    } </PRE> =0A=
=0A=
<p> -->=20
  Further, it is straightforward to query the assert status atop the =
current=20
  API, if you feel you must: <PRE>   boolean assertsEnabled =3D false;
   assert assertsEnabled =3D true;  // <B>Intentional side-effect!!!</B>
   // Now assertsEnabled is set to the correct value </PRE>
  <LI><B>Why does an <TT>assert</TT> statement that executes before its =
class is=20
  initialized behave as if assertions were enabled in the class?</B>=20
  <P><BR>Few programmers are aware of the fact that a class's =
constructors and=20
  methods can run prior to its initialization. When this happens, it is =
quite=20
  likely that the class's invariants have not yet been established, =
which can=20
  cause serious and subtle bugs. Any assertion that executes in this =
state is=20
  likely to fail, alerting the programmer to the problem. Thus, it is =
generally=20
  helpful to the programmer to execute all assertions encountered while =
in this=20
  state. </P></LI></OL><!-- Body text ends here --><!-- =
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D -->
<HR noShade SIZE=3D3>

<TABLE width=3D"100%" summary=3Dlayout border=3D0>
  <TBODY>
  <TR vAlign=3Dtop>
    <TD>
      <P><FONT size=3D-2><A=20
      =
href=3D"http://java.sun.com/j2se/1.4.2/docs/relnotes/SMICopyright.html">C=
opyright</A>=20
      =A9 2002 <A href=3D"http://www.sun.com/">Sun Microsystems, =
Inc.</A> All Rights=20
      Reserved.</FONT></P></TD><IMG height=3D30 alt=3DSun=20
    src=3D"http://java.sun.com/j2se/1.4.2/docs/images/sunlogo64x30.gif" =
width=3D64=20
    border=3D0> <BR><FONT size=3D+1><I>Java Software</I>=20
</FONT></TD></TR></TBODY></TABLE>
<SCRIPT language=3DJavaScript=20
src=3D"http://java.sun.com/js/omi/jsc/s_code_remote.js"></SCRIPT>
</BODY></HTML>

------=_NextPart_000_01F6_01C6830A.30DCB4C0
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/j2se/1.4.2/docs/images/javalogo52x88.gif

R0lGODlhNABYAMQAAP////4jDYaRxTRHnpmjzv6RhszR5v5aSWZ1tv7x7/4wHP7IwvLz+P6spP5M
Ov7V0UBSpP7j4P51Z/4+K6au1P66s/6Ddv5nWNjc7E1equXo8rK62nOAvL/F4P6elVppsCH5BAAA
AAAALAAAAAA0AFgAAAX/ICCOZGmeY/SgbOu+gAPPNDstdZ4fhe7DgctviHoEiUhSIdBLIhOKAM5J
vAQmVGIjEGhkf9uA7KsLK1bkmoTbPT3QaVLCwfaSIhaHJ156RLl2IgsHQRF8JGEBChUjg4qMhyMW
bBNoCZMBBwmRI2tcDpsAEXQBEpwjHmygIhF/gZxGXAqhMVympyJWXJAAZrSnf2MipLe4AGxNImxC
xgATuyRss82YyQB/TM0RXMwinlxwp0sBhoJsV7+cdMUAulzWnFBSIwnPXFjNfhO0fmzNIn7YYRKW
T8EUAAsA/RvxQNiWAywwGDCAYYgBAgI4UGBQIkG5A6tMaEBAcsCADAZq/3TgAAGCgA4uPFiAoeGD
yYovNmQwKYCjiwQHRzAwQCElCQ0mP7wwYNIkgqI4TUicSAEjApsnjZZAYPIFAwJYm4odS/YkBwJa
TXAdQGNoBwJWScolCZfABoowGEAYoHShCQEmYebQIIAAlQ08dXTYG3UphcYjKJg0rINA0w8I6qLd
UFcAgr0mIRDwCYABhwEI0tZgALis68sCcFKAwEG1Dw0bPO8sS1JAUdIAKGwA7jdSB+LFDWTo60KD
hkhrISAoDJcoXA7RR/NB/Pq17SEYnoswIAB0d9rDk3QQ8IE2AcEjMHD2LBduB8goNrrQyXdDJI0t
tDaAeHF08BmBIo11lv8ByA1GlGcDiOYTfiJQsBtZJJ2l2YaayWUeXy8JRUAGLQzFGXYXdldWBtP9
RgJ5LVG41ETWcUjjd0MRwFKE2rVVWFEMejXRfAhc6FJ6PmBAgW4qksViYR0gmIUGN1Y5UYPFZanl
QuNAtCUAXX4JJhdebhnml2eyUkEBbAa1wJu/APUmCQt4wGYD5SzwQDklnNmAPedUIoIrdPoTgTvn
zLQGPCKc+c0B2EzjSTcApJKJKJSQ8k4EC/CpBJkiNIBnI4QmQosnMwEgwUEJeIIPCmma4EkPCdQx
Aim8lLANFy3E2uc7udgiQq1cpBMNryzEGoEHEhxwgD1NWKqACBV8UsK0ms4SgiysoAKQAKLnNLFr
AIxgkioAFWBzTgC9dqvtBAW8OeutXMxEChoJ2dLAm/4kC2q16IwwTjLjTLDrq6TsMUK/3F468KfZ
AMSGuQtvq4zFJoSZ5hzAjgAoOBXPEyrDJ4QJcBANWICNNZhYS68iHnigLca/XlrLurpYc3IbI+ws
i7YtaNvEJc8ocAEOzr4CQLaUUqutAwUk0ICzLBDLc5YcK2JsPprm6pc8i4j5gAdbNxMCADs=

------=_NextPart_000_01F6_01C6830A.30DCB4C0
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://java.sun.com/j2se/1.4.2/docs/images/sunlogo64x30.gif

R0lGODlhQAAeAMQAAP////Dw8CgoKAAAAODg4IiIiBEREejo6NDQ0MLCwtjY2KCgoEBAQFFRUXBw
cBkZGSAgIAgICICAgGBgYFhYWJGRkbCwsDg4OGhoaEhISHh4eDAwMLi4uKioqMjIyJiYmCH5BAAA
AAAALAAAAABAAB4AQAX/ICCOZGmeaKquADNcWDYMEjQUWfYMuWI6swyp4wEkMgIHydKYHESOB+MJ
6FwEE1JCahgwJJXBBhiZMDAzxOjwSGhnBoJnphF5uoPsAmGZZUUaMx0EFSsHCz4rHA4aGgsLBQoO
HBUVi0QFHIgfFQsTGR4VEgiNEqMSHCouZgMUDQMGVCkKAjcHB2EDFiy8ADMUAwKBETsfAH0QtQ3A
AhEDaiSvMwIBHBcAMnEiATYQABMcAV0XED7cYigIMw0bXi4CBCfDg5I8TwTOAxFKABcz5QCAGQgw
As0MUwyE9FrIAgGFRAxVFJgBSxavAAgSQIzYC8gADTYwuGDgj0K8E32e/5GgIICjKi9oIBDx+HEH
uwENOnwguGbHjAUjPDzQ0KVB0BkYAl6YUBEDBAQcBAEgkGECmQldKNgw4KCBBGAXPLoxkSBfSwAS
ZuwS0U7XCGA4R8iIAI2EhwwGGLS74GLMryJDBgC2M8OYv2sBvqR9cIBBnS4KjdDhAOHkiTkDdlC4
iMDyCp4uQ4/QkAADhwYLNGDQgACDAgoFKHj4UoGxhgsLMFTIsMCChgodClhwcO1zLXiik/c6NJHB
q1i8CESBACGCAAkWlZfgG9IFhWzZSQTwV4CEi7raR7TzCHIAcS9pDaDwmGrEhD/LQaMYiYZB1Bfu
HeAMK3WU0AFFEhhIkf8329TyAEEyzOAGBgbYMEAqr5wRTCD6LODAAjbVQgFcDI6Qiz5ujIfKTyOI
1QEEB2RYAHLD+OCTMPpgNQARKeEElkf6AXBALQcdQIACzhglwgJICQkAk1JVcdASv3ShEyywBJCW
X4KNoIB+BkXgQzsQ8DTRAGWKcEAXdImgjhcmiOPeKxfI4NcDB6o0QgIDjCUCki8A4FERB2wAFwcE
VMZUmwAE4GBA+I1AwDrtMNAXMIMVdAMJTDEwVVEIGBpQMBNsEEBKHYyQ1gAYYKHbCW82UItqa8W5
AAMQbCDABcYUJEAGtToAwQQnfdBAISN0IMAGQHUwQYGXUVRfLwoAtRBRApmmpwIjGUiAmgMYAJXB
B7JR4EAGCTTQgAYMLFDBBwvwVUADDtRbAAO1pueBHARotG8FCbiBwCgIVEDAB0p8EE4F1X6gAAII
PFxwttpWnEIIADs=

------=_NextPart_000_01F6_01C6830A.30DCB4C0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://java.sun.com/js/omi/jsc/s_code_remote.js

/* SiteCatalyst Code Version: G.5 */=0A=
/* SMI Version 6.3 */=0A=
/*Note to SMI web developers. Do not install or test this code on your =
site without approval from the .SUN organization!*/=0A=
/* =0A=
Convert all index.html, index.jsp, etc. to foo/.=0A=
Increase s_hier to 15 levels=0A=
Add java.net to internal links.=0A=
*/=0A=
=0A=
/************************** CONFIG SECTION **************************/=0A=
=0A=
/* Set the Report Suite ID(s) and site ID for each Sun site. The site ID =0A=
   is pre-pended to pageNames and channel names. */=0A=
   var s_account=3D"sunglobal,sundeveloper"=0A=
// var s_account=3D"devsunjavas"=0A=
=0A=
/* Uncomment one of the following */=0A=
var s_siteid =3D "jsc:"=0A=
=0A=
var s_dynamicAccountSelection=3Dfalse=0A=
var s_dynamicAccountList=3D""=0A=
=0A=
var =
s_linkInternalFilters=3D"javascript:,sun.com,java.com,opensolaris.org,sun=
-catalogue.com,java.net,netbeans.org,globalspecials.sun.com"=0A=
=0A=
/* List s_prop and s_eVar variables to be passed during =
custom/exit/download links.=0A=
   Otherwise, values passed in are ignored. */=0A=
var s_linkTrackVars=3D"None"=0A=
=0A=
/* List event values in "s_events" to be passed during =
custom/exit/download links.=0A=
   Otherwise, events are ignored by default. */=0A=
var s_linkTrackEvents=3D"None"=0A=
=0A=
/* Plugin Config - may be specific to each Sun site */=0A=
var s_usePlugins=3Dtrue=0A=
=0A=
function s_doPlugins() {=0A=
  /* Add calls to plugins here */=0A=
        /*pageType 404 fix */=0A=
        if(s_pageType=3D=3D""){=0A=
  /* External campaigns */=0A=
  if(s_campaign=3D=3D"")=0A=
    s_vp_getCGI('s_campaign','cid');=0A=
/* Campaign Pathing-30 minutes */=0A=
  =
s_vp_getCustomPagePath("s_prop4",s_vp_getValue("s_campaign"),"cmpPath","c=
id=3D");=0A=
/* Campaign Page Views */=0A=
	s_vp_setAndPersistValue('s_prop5',s_vp_getValue('s_campaign'),1.0/48);=0A=
  // Internal campaigns=0A=
  s_vp_getCGI('s_eVar1','intcmp');=0A=
//  s_vp_getFormAbandonState("s_prop1","o","Form Abandonment");=0A=
        }=0A=
}=0A=
=0A=
// ###################################################=0A=
// CODE CHANGE FOR FILE: PROTOCOL EXCLUSION 6/28/2005=0A=
// ###################################################=0A=
// NEW CODE:=0A=
   var s_isValid =3D true;=0A=
   if (location.protocol=3D=3D"file:") { s_isValid=3Dfalse; }=0A=
// END CODE CHANGE=0A=
=0A=
/***************** STANDARD CODE FOR ALL SUN SITES ******************/=0A=
/**********TO BE CHANGED ONLY BY SMI .SUN PROGRAM MANAGEMENT*****/=0A=
/* Make certain these variables are defined, if not on page */=0A=
if (typeof s_channel=3D=3D'undefined')=0A=
   var s_channel =3D "";=0A=
if (typeof s_pageName=3D=3D'undefined')=0A=
   var s_pageName =3D "";   =0A=
if(typeof s_events=3D=3D'undefined')=0A=
  var s_events=3D"";=0A=
if(typeof s_campaign=3D=3D'undefined')=0A=
  var s_campaign=3D"";=0A=
if(typeof s_hier1=3D=3D'undefined')=0A=
  var s_hier1=3D"";=0A=
if (typeof s_pageType=3D=3D'undefined')=0A=
  var s_pageType=3D"";=0A=
        =0A=
        /*pageType 404 fix */   =0A=
        if(s_pageType=3D=3D""){=0A=
/* Check for this common problem */=0A=
if (s_pageName.toLowerCase()=3D=3D"document.title"){=0A=
  s_pageName=3Ddocument.title;=0A=
}=0A=
=0A=
/* Use URL as default page name unless s_pageName already populated. */=0A=
if (typeof s_pageName!=3D'undefined') {=0A=
    // See if it has a value=0A=
    if (s_pageName=3D=3D"") {=0A=
        s_pageName=3Dwindow.top.location.pathname.toLowerCase();=0A=
        var s_iNames =3D =
["index.html","index.jsp","index.htm","index.shtml","index.xml","index.jh=
tml","index.jshtml","index.jspa","index.php"];=0A=
        for (var a=3D0; a<s_iNames.length; a++) {=0A=
            var s_iName =3D "/"+s_iNames[a];=0A=
            if (s_pageName.indexOf(s_iName) > -1 && =
s_pageName.indexOf(s_iName) =3D=3D s_pageName.length - s_iName.length) {=0A=
                s_pageName =3D s_pageName.substring(0, s_pageName.length =
- s_iNames[a].length);=0A=
            }=0A=
        }=0A=
    }=0A=
}=0A=
        }=0A=
var s_disableLegacyVars=3Dtrue=0A=
var s_eVarCFG=3D""=0A=
=0A=
        /*pageType 404 fix */=0A=
        if(s_pageType=3D=3D""){=0A=
/* Link Tracking Config */=0A=
var s_trackDownloadLinks=3Dtrue  // downloads=0A=
var s_trackExternalLinks=3Dtrue  // external links=0A=
var s_trackInlineStats=3Dtrue    // ClickMap=0A=
var =
s_linkDownloadFileTypes=3D"exe,zip,wav,mp3,mov,mpg,avi,doc,pdf,xls,bin,ta=
r,Z,gz"=0A=
var s_linkLeaveQueryString=3Dfalse=0A=
=0A=
/* Populate "s_channel" variable (if not already populated). Based on 15 =
levels of directory. */=0A=
if(s_channel=3D=3D""){=0A=
  var s_t1=3D0=0A=
  var s_t2=3D0=0A=
  var s_du=3D""=0A=
  s_du=3Dwindow.top.location.href.toLowerCase()=0A=
  if((s_t1=3Ds_du.indexOf("://"))>=3D0){=0A=
    if((s_t2=3Ds_du.indexOf("/",s_t1+3))>=3D(s_t1+3)){=0A=
      if(s_du.indexOf(".",s_t1+3)<s_t2){=0A=
        var s_c2=3D""=0A=
       =0A=
        s_t1=3Ds_t2+1=0A=
        s_t2=3Ds_du.lastIndexOf("/")=0A=
        s_channel=3Ds_du.substring(s_t1,s_t2)=0A=
       =0A=
        // Replace all "/" chars with ":"=0A=
        for(s_t2=3D0; s_t2<s_channel.length; s_t2++){=0A=
          if(s_channel.charAt(s_t2)=3D=3D"/"){=0A=
            // Bogus code, but JavaScript 1.0-compatible=0A=
            =
s_c2=3Ds_channel.substring(0,s_t2)+":"+s_channel.substring(s_t2+1,s_chann=
el.length)=0A=
            s_channel=3Ds_c2=0A=
          }=0A=
        }=0A=
      }=0A=
    }=0A=
    =0A=
  =0A=
    // Remove everything after the fifteenth "/"=0A=
    s_t1=3D0=0A=
    for(s_t2=3D0;s_t2<s_channel.length;s_t2++){=0A=
      if(s_channel.charAt(s_t2)=3D=3D":"){=0A=
        s_t1++=0A=
        if(s_t1=3D=3D15){=0A=
          s_channel=3Ds_channel.substring(0,s_t1-1)=0A=
          break=0A=
        }=0A=
      }=0A=
    }=0A=
  }=0A=
}=0A=
=0A=
/* Places entire path into Hierarchy variable, or just s_channel if =
populated on page. */=0A=
=0A=
if(s_hier1=3D=3D""){=0A=
	if(s_channel!=3D=3D""){=0A=
      s_hier1=3Ds_siteid+s_channel=0A=
    }=0A=
}=0A=
=0A=
=0A=
/* STANDARD SUN GLOBAL ACCOUNT CODE: pre-pend "pageName", "channel", and =
"s_hier" with "s_siteid" if not already prepended*/=0A=
if(typeof s_siteid!=3D'undefined'){=0A=
  if(typeof s_pageName!=3D'undefined'&&s_pageName.length>0){=0A=
    if(s_pageName.substr(0,s_siteid.length).toLowerCase()!=3Ds_siteid){=0A=
      s_pageName=3Ds_siteid+s_pageName;=0A=
    }=0A=
  }=0A=
  if(s_channel.length>0){=0A=
    if (s_channel.substr(0,s_siteid.length).toLowerCase()!=3Ds_siteid){=0A=
        s_channel=3Ds_siteid+s_channel;=0A=
    }=0A=
  }=0A=
if(s_hier1.length>0){=0A=
    if (s_hier1.substr(0,s_siteid.length).toLowerCase()!=3Ds_siteid){=0A=
        s_hier1=3Ds_siteid+s_hier1;=0A=
    }=0A=
  }=0A=
}=0A=
=0A=
/* PUT SITE_ID INTO S_PROP2*/=0A=
if(typeof s_siteid=3D=3D'undefined'){var s_siteid=3D""};=0A=
if(typeof s_prop2=3D=3D'undefined'){var s_prop2=3D""};=0A=
   s_prop2=3Ds_siteid;=0A=
        }=0A=
=0A=
/************************** PLUGINS SECTION *************************/=0A=
/* You may insert any plugins you wish to use here.                 */=0A=
/*=0A=
 * Plugin: Get State Of Form On Abandon=0A=
 New Form Abandon Plugin goes here when available.=0A=
 */=0A=
=0A=
/*=0A=
 * Plugin: Get Query String CGI Variable Value=0A=
 */=0A=
function s_vp_getCGI(vs,k)=0A=
        {var v=3D'';if(k&&s_wd.location.search){var =
q=3Ds_wd.location.search,=0A=
        =
qq=3Dq.indexOf('?');q=3Dqq<0?q:q.substring(qq+1);v=3Ds_pt(q,'&',s_cgif,=0A=
        k)}s_vpr(vs,v)}function s_cgif(t,k){if(t){var =
te=3Dt.indexOf('=3D'),=0A=
        =
sk=3Dte<0?t:t.substring(0,te),sv=3Dte<0?'True':t.substring(te+1);if(=0A=
        sk=3D=3Dk)return s_epa(sv)}return ''}=0A=
/* =0A=
Plugin: Custom Page Path v1.0 (Campaign Pathing-30 minutes)=0A=
*/=0A=
function s_vp_getCustomPagePath(s,v,c,p) {=0A=
var pn=3Ds_vp_getValue("s_pageName");=0A=
var t=3Dnew Date;t.setTime(t.getTime()+1800000); =0A=
if(v){if(s_c_w(c,v,t)){s_vpr(s,p+v+":"+pn)}}=0A=
else{v=3Ds_c_r(c);if(v){s_c_w(c,v,t);s_vpr(s,pn);}}=0A=
}=0A=
/*=0A=
 * Plugin: setAndPersistValue 0.1 - get a value on every page-30 minutes=0A=
 */=0A=
function s_vp_setAndPersistValue(vs,v,a){=0A=
	var l,e=3Dnew Date;if(v){e.setTime(e.getTime()+a*86400000);s_c_w(=0A=
	's_p_'+vs,v,a?e:a)};l=3Ds_c_r('s_p_'+vs);s_vpr(vs,l)}=0A=
/*=0A=
 * Plugin: Get Plugin Modified Value=0A=
 */=0A=
function s_vp_getValue(vs)=0A=
        {var k=3Dvs.substring(0,2)=3D=3D's_'?vs.substring(2):vs;return =
s_wd[=0A=
        's_vpm_'+k]?s_wd['s_vpv_'+k]:s_gg(k)}=0A=
/*=0A=
 * Plugin Utilities v2.0 (Required For All Plugins)=0A=
 */=0A=
function s_vpr(vs,v){if(s_wd[vs])s_wd[vs]=3Ds_wd[vs];else s_wd[vs]=3D''=0A=
if(vs.substring(0,2) =3D=3D =
's_')vs=3Dvs.substring(2);s_wd['s_vpv_'+vs]=3Dv=0A=
s_wd['s_vpm_'+vs]=3D1}function s_dt(tz,t){var d=3Dnew =
Date;if(t)d.setTime(=0A=
t);d=3Dnew Date(d.getTime()+(d.getTimezoneOffset()*60*1000))=0A=
return new Date(Math.floor(d.getTime()+(tz*60*60*1000)))}=0A=
function s_vh_gt(k,v){var vh=3D'|'+s_c_r('s_vh_'+k),vi=3Dvh.indexOf('|'+v=0A=
+'=3D'),ti=3Dvi<0?vi:vi+2+v.length,pi=3Dvh.indexOf('|',ti),t=3Dti<0?'':=0A=
vh.substring(ti,pi<0?vh.length:pi);return t}function s_vh_gl(k){var=0A=
vh=3Ds_c_r('s_vh_'+k),e=3Dvh?vh.indexOf('=3D'):0;return =
vh?(vh.substring(0,=0A=
e?e:vh.length)):''}function s_vh_s(k,v){if(k&&v){var e=3Dnew Date,st=3D=0A=
e.getTime(),y=3De.getYear(),c=3D's_vh_'+k,vh=3D'|'+s_c_r(c)+'|',t=3Ds_vh_=
gt(k,=0A=
v);e.setYear((y<1900?y+1900:y)+5);if(t)vh=3Ds_rep(vh,'|'+v+'=3D'+t+'|','|=
'=0A=
);if(vh.substring(0,1)=3D=3D'|')vh=3Dvh.substring(1);if(vh.substring(=0A=
vh.length-1,vh.length)=3D=3D'|')vh=3Dvh.substring(0,vh.length-1);vh=3Dv=0A=
+'=3D[PCC]'+(vh?'|'+vh:'');s_c_w(c,vh,e);if(s_vh_gt(k,v)!=3D'[PCC]')=0A=
return 0;vh=3Ds_rep(vh,'[PCC]',st);s_c_w(c,vh,e)}return 1}=0A=
=0A=
/************* DO NOT ALTER ANYTHING BELOW THIS LINE ! **************/=0A=
var =
s_un,s_ios=3D0,s_q=3D'',s_code=3D'',code=3D'',s_bcr=3D0,s_lnk=3D'',s_eo=3D=
'',=0A=
s_vb,s_pl,s_tfs=3D0,s_etfs=3D0,s_wd=3Dwindow,s_d=3Ds_wd.document,s_ssl=3D=
(=0A=
s_wd.location.protocol.toLowerCase().indexOf('https')>=3D0),s_n=3D=0A=
navigator,s_u=3Ds_n.userAgent,s_apn=3Ds_n.appName,s_v=3Ds_n.appVersion,=0A=
s_apv,s_i,s_ie=3Ds_v.indexOf('MSIE '),s_ns6=3Ds_u.indexOf('Netscape6/')=0A=
if(s_v.indexOf('Opera')>=3D0||s_u.indexOf('Opera')>=3D0)s_apn=3D'Opera';v=
ar=0A=
s_isie=3D(s_apn=3D=3D'Microsoft Internet Explorer'),s_isns=3D(s_apn=3D=3D=0A=
'Netscape'),s_isopera=3D(s_apn=3D=3D'Opera'),s_ismac=3D(s_u.indexOf('Mac'=
)>=3D0)=0A=
if(s_ie>0){s_apv=3DparseInt(s_i=3Ds_v.substring(s_ie+5));if(s_apv>3)s_apv=
=3D=0A=
parseFloat(s_i)}else if(s_ns6>0)s_apv=3DparseFloat(s_u.substring(s_ns6=0A=
+10));else s_apv=3DparseFloat(s_v);function s_fl(s,l){return (s+''=0A=
).substring(0,l)}function s_co(o){if(!o)return o;var n=3Dnew Object=0A=
for(x in o)n[x]=3Do[x];return n}function s_num(x){var s=3Dx.toString(),g=3D=0A=
'0123456789',p,d;for(p=3D0;p<s.length;p++){d=3Ds.substring(p,p+1);if(=0A=
g.indexOf(d)<0)return 0}return 1}function s_rep(s,o,n){var i=3D=0A=
s.indexOf(o),l=3Dn.length>0?n.length:1;while(s&&i>=3D0){s=3Ds.substring(0=
,i)=0A=
+n+s.substring(i+o.length);i=3Ds.indexOf(o,i+l)}return s}function s_ape(=0A=
s){return s?s_rep(escape(''+s),'+','%2B'):s}function s_epa(s){=0A=
return s?unescape(s_rep(''+s,'+',' ')):s}function s_pt(s,d,f,a){var t=3D=0A=
s,x=3D0,y,r;while(t){y=3Dt.indexOf(d);y=3Dy<0?t.length:y;t=3Dt.substring(=
0,y)=0A=
r=3Df(t,a);if(r)return =
r;x+=3Dy+d.length;t=3Ds.substring(x,s.length);t=3Dx<=0A=
s.length?t:''}return ''}function =
s_isf(t,a){if(t.substring(0,2)=3D=3D's_')=0A=
t=3Dt.substring(2);return (t!=3D''&&t=3D=3Da)}function =
s_fsf(t,a){if(s_pt(a,=0A=
',',s_isf,t))s_fsg+=3D(s_fsg!=3D''?',':'')+t;return 0}var s_fsg=0A=
function s_fs(s,f){s_fsg=3D'';s_pt(s,',',s_fsf,f);return s_fsg}var=0A=
s_c_d=3D'';function s_c_gdf(t,a){if(!s_num(t))return 1;return 0}=0A=
function s_c_gd(){var d=3Ds_wd.location.hostname,n=3Ds_gg(=0A=
'cookieDomainPeriods'),p;if(d&&!s_c_d){n=3Dn?parseInt(n):2;n=3Dn>2?n:2;p=3D=0A=
d.lastIndexOf('.');while(p>=3D0&&n>1){p=3Dd.lastIndexOf('.',p-1);n--}=0A=
s_c_d=3Dp>0&&s_pt(d,'.',s_c_gdf,0)?d.substring(p):''}return s_c_d}=0A=
function s_c_r(k){k=3Ds_ape(k);var c=3D' '+s_d.cookie,s=3Dc.indexOf(' '+k=0A=
+'=3D'),e=3Ds<0?s:c.indexOf(';',s),v=3Ds<0?'':s_epa(c.substring(s+2=0A=
+k.length,e<0?c.length:e));return v}function s_c_w(k,v,e){var d=3D=0A=
s_c_gd(),l=3Ds_gg('cookieLifetime');v=3D''+v;l=3Dl?(''+l).toUpperCase():'=
'=0A=
if(e&&l!=3D'SESSION'&&l!=3D'NONE'){l=3DparseInt(l);if(l){e=3Dnew Date=0A=
e.setTime(e.getTime()+(parseInt(l)*1000))}}if(k&&l!=3D'NONE'){=0A=
s_d.cookie=3Dk+'=3D'+s_ape(v)+'; path=3D/;'+(e&&l!=3D'SESSION'?' =
expires=3D'=0A=
+e.toGMTString()+';':'')+(d?' domain=3D'+d+';':'');return =
s_c_r(k)=3D=3Dv}=0A=
return 0}function s_cet(f,a,et,oe,fb){var r,d=3D0=0A=
/*@cc_on@if(@_jscript_version>=3D5){try{return f(a)}catch(e){return =
et(e)}d=3D1}@end@*/=0A=
if(!d){if(s_ismac&&s_u.indexOf('MSIE 4')>=3D0)return fb(a);else{=0A=
s_wd.s_oe=3Ds_wd.onerror;s_wd.onerror=3Doe;r=3Df(a);s_wd.onerror=3Ds_wd.s=
_oe=0A=
return r}}}function s_gtfset(e){return s_tfs}function s_gtfsoe(e){=0A=
s_wd.onerror=3Ds_wd.s_oe;s_etfs=3D1;var =
code=3Ds_gs(s_un);if(code)s_d.write(=0A=
code);s_etfs=3D0;return true}function s_gtfsfb(a){return s_wd}=0A=
function s_gtfsf(w){var p=3Dw.parent,l=3Dw.location;s_tfs=3Dw;if(p&&=0A=
p.location!=3Dl&&p.location.host=3D=3Dl.host){s_tfs=3Dp;return =
s_gtfsf(s_tfs)}=0A=
return s_tfs}function s_gtfs(){if(!s_tfs){s_tfs=3Ds_wd;if(!s_etfs)s_tfs=3D=0A=
s_cet(s_gtfsf,s_tfs,s_gtfset,s_gtfsoe,s_gtfsfb)}return s_tfs}=0A=
function s_ca(un){un=3Dun.toLowerCase();var =
ci=3Dun.indexOf(','),fun=3Dci<0?=0A=
un:un.substring(0,ci),imn=3D's_i_'+fun;if(s_d.images&&s_apv>=3D3&&=0A=
!s_isopera&&(s_ns6<0||s_apv>=3D6.1)){s_ios=3D1;if(!s_d.images[imn]&&(=0A=
!s_isns||(s_apv<4||s_apv>=3D5))){s_d.write('<im'+'g name=3D"'+imn=0A=
+'" height=3D1 width=3D1 border=3D0 =
alt=3D"">');if(!s_d.images[imn])s_ios=3D0}}}=0A=
function s_it(un){s_ca(un)}function s_mr(un,sess,q,ta){un=3D=0A=
un.toLowerCase();var ci=3Dun.indexOf(','),fun=3Dci<0?un:un.substring(0,ci=0A=
),unc=3Ds_rep(fun,'_','-'),imn=3D's_i_'+fun,im,b,e,rs=3D'http'+(s_ssl?'s'=
:''=0A=
)+'://'+(s_ssl?'102':unc)+'.112.2O7.net/b/ss/'+un+'/1/G.5-PD-R/'=0A=
+sess+'?[AQB]&ndh=3D1'+(q?q:'')+(s_q?s_q:'')+'&[AQE]';if(s_ios){im=3Ds_wd=
[=0A=
imn]?s_wd[imn]:s_d.images[imn];if(!im)im=3Ds_wd[imn]=3Dnew =
Image;im.src=3Drs=0A=
if(rs.indexOf('&pe=3D')>=3D0&&(!ta||ta=3D=3D'_self'||ta=3D=3D'_top'||(s_w=
d.name&&=0A=
ta=3D=3Ds_wd.name))){b=3De=3Dnew =
Date;while(e.getTime()-b.getTime()<500)e=3D=0A=
new Date}return ''}return '<im'+'g sr'+'c=3D"'+rs=0A=
+'" width=3D1 height=3D1 border=3D0 alt=3D"">'}function s_gg(v){var =
g=3D's_'+v=0A=
return s_wd[g]||s_wd.s_disableLegacyVars?s_wd[g]:s_wd[v]}var s_qav=3D''=0A=
function s_havf(t,a){var b=3Dt.substring(0,4),s=3Dt.substring(4),n=3D=0A=
parseInt(s),k=3D's_g_'+t,m=3D's_vpm_'+t,q=3Dt,v=3Ds_gg('linkTrackVars'),e=
=3D=0A=
s_gg('linkTrackEvents');if(!s_wd['s_'+t])s_wd['s_'+t]=3D'';s_wd[k]=3Ds_wd=
[=0A=
m]?s_wd['s_vpv_'+t]:s_gg(t);if(s_lnk||s_eo){v=3Dv?v+',pageName,charSet,'=0A=
+'cookieDomainPeriods,cookieLifetime,eVarCFG,purchaseID':'';if(v&&=0A=
!s_pt(v,',',s_isf,t))s_wd[k]=3D'';if(t=3D=3D'events'&&e)s_wd[k]=3Ds_fs(s_=
wd[k=0A=
],e)}s_wd[m]=3D0;if(t=3D=3D'charSet')q=3D'ce';else =
if(t=3D=3D'cookieDomainPeriods'=0A=
)q=3D'cdp';else if(t=3D=3D'cookieLifetime')q=3D'cl';else =
if(t=3D=3D'channel')q=3D=0A=
'ch';else if(t=3D=3D'campaign')q=3D'v0';else =
if(s_num(s)){if(b=3D=3D'prop')q=3D'c'=0A=
+n;else if(b=3D=3D'eVar')q=3D'v'+n;else =
if(b=3D=3D'hier')q=3D'h'+n}if(s_wd[k]&&t!=3D=0A=
'linkName'&&t!=3D'linkType')s_qav+=3D'&'+q+'=3D'+s_ape(s_wd[k]);return =
''}=0A=
function s_hav(){var n,av=3D'charSet,cookieDomainPeriods,cookieLifetime'=0A=
+',pageName,channel,server,pageType,campaign,state,zip,events,product'=0A=
+'s,purchaseID,eVarCFG,linkName,linkType';for(n=3D1;n<26;n++)av+=3D',prop=
'=0A=
+n+',eVar'+n+',hier'+n;s_qav=3D'';s_pt(av,',',s_havf,0);return s_qav}=0A=
function s_lnf(t,h){t=3Dt?t.toLowerCase():'';h=3Dh?h.toLowerCase():'';var=0A=
te=3Dt.indexOf('=3D');if(t&&te>0&&h.indexOf(t.substring(te+1))>=3D0)=0A=
return t.substring(0,te);return ''}function s_ln(h){if(s_gg(=0A=
'linkNames'))return s_pt(s_gg('linkNames'),',',s_lnf,h);return ''}=0A=
function =
s_ltdf(t,h){t=3Dt?t.toLowerCase():'';h=3Dh?h.toLowerCase():'';var=0A=
qi=3Dh.indexOf('?');h=3Dqi>=3D0?h.substring(0,qi):h;if(t&&h.substring(=0A=
h.length-(t.length+1))=3D=3D'.'+t)return 1;return 0}function s_ltef(t,h){=0A=
t=3Dt?t.toLowerCase():'';h=3Dh?h.toLowerCase():'';if(t&&h.indexOf(t)>=3D0=
)=0A=
return 1;return 0}function s_lt(h){var lft=3Ds_gg(=0A=
'linkDownloadFileTypes'),lef=3Ds_gg('linkExternalFilters'),lif=3Ds_gg(=0A=
'linkInternalFilters')?s_gg('linkInternalFilters'):=0A=
s_wd.location.hostname;h=3Dh.toLowerCase();if(s_gg('trackDownloadLinks'=0A=
)&&lft&&s_pt(lft,',',s_ltdf,h))return 'd';if(s_gg('trackExternalLinks'=0A=
)&&(lef||lif)&&(!lef||s_pt(lef,',',s_ltef,h))&&(!lif||!s_pt(lif,',',=0A=
s_ltef,h)))return 'e';return ''}function s_lc(e){s_lnk=3Ds_co(this)=0A=
s_gs('');s_lnk=3D'';if(this.s_oc)return this.s_oc(e);return true}=0A=
function s_ls(){var l,ln,oc;for(ln=3D0;ln<s_d.links.length;ln++){l=3D=0A=
s_d.links[ln];oc=3Dl.onclick?l.onclick.toString():'';if(oc.indexOf(=0A=
"s_gs(")<0&&oc.indexOf("s_lc(")<0){l.s_oc=3Dl.onclick;l.onclick=3Ds_lc}}}=0A=
function s_bc(e){s_eo=3De.srcElement?e.srcElement:e.target;s_gs('')=0A=
s_eo=3D''}function s_ot(o){var x=3Do.type,y=3Do.tagName;return (x&&=0A=
x.toUpperCase?x:y&&y.toUpperCase?y:o.href?'A':'').toUpperCase()}=0A=
function s_oid(o){var =
t=3Ds_ot(o),p=3Do.protocol,c=3Do.onclick,n=3D'',x=3D0;if(=0A=
!o.s_oid){if(o.href&&(t=3D=3D'A'||t=3D=3D'AREA')&&(!c||!p||p.toLowerCase(=0A=
).indexOf('javascript')<0))n=3Do.href;else if(c){n=3Ds_rep(s_rep(s_rep(=0A=
s_rep(c.toString(),"\r",''),"\n",''),"\t",''),' ','');x=3D2}else if(=0A=
o.value&&(t=3D=3D'INPUT'||t=3D=3D'SUBMIT')){n=3Do.value;x=3D3}else =
if(o.src&&t=3D=3D=0A=
'IMAGE')n=3Do.src;if(n){o.s_oid=3Ds_fl(n,100);o.s_oidt=3Dx}}return =
o.s_oid}=0A=
function s_rqf(t,un){var =
e=3Dt.indexOf('=3D'),u=3De>=3D0?','+t.substring(0,e)=0A=
+',':'';return u&&u.indexOf(','+un+',')>=3D0?s_epa(t.substring(e+1)):''}=0A=
function s_rq(un){var =
c=3Dun.indexOf(','),v=3Ds_c_r('s_sq'),q=3D'';if(c<0)=0A=
return s_pt(v,'&',s_rqf,un);return s_pt(un,',',s_rq,0)}var s_sqq,s_squ=0A=
function s_sqp(t,a){var =
e=3Dt.indexOf('=3D'),q=3De<0?'':s_epa(t.substring(e=0A=
+1));s_sqq[q]=3D'';if(e>=3D0)s_pt(t.substring(0,e),',',s_sqs,q);return 0}=0A=
function s_sqs(un,q){s_squ[un]=3Dq;return 0}function s_sq(un,q){s_sqq=3D=0A=
new Object;s_squ=3Dnew Object;s_sqq[q]=3D'';var =
k=3D's_sq',v=3Ds_c_r(k),x,c=3D0=0A=
s_pt(v,'&',s_sqp,0);s_pt(un,',',s_sqs,q);v=3D'';for(x in s_squ)s_sqq[=0A=
s_squ[x]]+=3D(s_sqq[s_squ[x]]?',':'')+x;for(x in s_sqq)if(x&&s_sqq[x]&&(=0A=
x=3D=3Dq||c<2)){v+=3D(v?'&':'')+s_sqq[x]+'=3D'+s_ape(x);c++}return =
s_c_w(k,v,0=0A=
)}function s_wdl(e){s_wd.s_wd_l=3D1;var =
r=3Dtrue;if(s_wd.s_ol)r=3Ds_wd.s_ol(=0A=
e);if(s_wd.s_ls)s_wd.s_ls();return r}function s_wds(un){un=3D=0A=
un.toLowerCase();s_wd.s_wd_l=3D1;if(s_apv>3&&(!s_isie||!s_ismac||s_apv>=3D=0A=
5)){s_wd.s_wd_l=3D0;if(!s_wd.s_unl)s_wd.s_unl=3Dnew Array;s_wd.s_unl[=0A=
s_wd.s_unl.length]=3Dun;if(s_d.body&&s_d.body.attachEvent){if(=0A=
!s_wd.s_bcr&&s_d.body.attachEvent('onclick',s_bc))s_wd.s_bcr=3D1}=0A=
else if(s_d.body&&s_d.body.addEventListener){if(!s_wd.s_bcr&&=0A=
s_d.body.addEventListener('click',s_bc,false))s_wd.s_bcr=3D1}else{var=0A=
ol=3Ds_wd.onload?s_wd.onload.toString():'';if(ol.indexOf("s_wdl(")<0){=0A=
s_wd.s_ol=3Ds_wd.onload;s_wd.onload=3Ds_wdl}}}}function s_iepf(i,a){if(=0A=
i.substring(0,1)!=3D'{')i=3D'{'+i+'}';if(s_d.body.isComponentInstalled(i,=0A=
'ComponentID')){var n=3Ds_pl.length;s_pl[n]=3Dnew Object;s_pl[n].name=3Di=0A=
+':'+s_d.body.getComponentVersion(i,'ComponentID')}return 0}=0A=
function s_vs(un,x){var s=3Ds_gg('visitorSampling'),g=3Ds_gg(=0A=
'visitorSamplingGroup'),k=3D's_vsn_'+un+(g?'_'+g:''),n=3Ds_c_r(k),e=3D=0A=
new Date,y=3De.getYear();e.setYear(y+10+(y<1900?1900:0));if(s){s*=3D100=0A=
if(!n){if(!s_c_w(k,x,e))return 0;n=3Dx}if(n%10000>s)return 0}return 1}=0A=
function s_dyasmf(t,m){if(t&&m&&m.indexOf(t)>=3D0)return 1;return 0}=0A=
function s_dyasf(t,m){var =
i=3Dt?t.indexOf('=3D'):-1,un,s;if(i>=3D0&&m){var=0A=
un=3Dt.substring(0,i),s=3Dt.substring(i+1);if(s_pt(s,',',s_dyasmf,m))=0A=
return un}return 0}function s_dyas(un,l,m){if(!m)m=3Ds_wd.location.host=0A=
if(!m.toLowerCase)m=3Dm.toString();l=3Dl.toLowerCase();m=3Dm.toLowerCase(=
)=0A=
var nun=3Ds_pt(l,';',s_dyasf,m);if(nun)return nun;return un}=0A=
function s_gs(un){un=3Dun.toLowerCase()=0A=
var dyas=3Ds_gg('dynamicAccountSelection'),dyal=3Ds_gg(=0A=
'dynamicAccountList'),dyam=3Ds_gg('dynamicAccountMatch');if(dyas&&dyal)=0A=
un=3Ds_dyas(un,dyal,dyam);=0A=
s_un=3Dun;var trk=3D1,tm=3Dnew Date,sed=3DMath&&Math.random?Math.floor(=0A=
Math.random()*10000000000000):tm.getTime(),sess=3D's'+Math.floor(=0A=
tm.getTime()/10800000)%10+sed,yr=3Dtm.getYear(),t,ta=3D'',q=3D'',qs=3D'';=
yr=3D=0A=
yr<1900?yr+1900:yr;t=3Dtm.getDate()+'/'+tm.getMonth()+'/'+yr+' '=0A=
+tm.getHours()+':'+tm.getMinutes()+':'+tm.getSeconds()+' '+tm.getDay()=0A=
+' '+tm.getTimezoneOffset();if(!s_q){var =
tfs=3Ds_gtfs(),tl=3Dtfs.location,=0A=
r=3Dtfs.document.referrer,s=3D'',c=3D'',v=3D'',p=3D'',bw=3D'',bh=3D'',j=3D=
'1.0',g=3D=0A=
s_wd.location,k=3Ds_c_w('s_cc','true',0)?'Y':'N',hp=3D'',ct=3D'',iepl=3Ds=
_gg(=0A=
'iePlugins'),pn=3D0,ps;if(s_apv>=3D4)s=3Dscreen.width+'x'+screen.height;i=
f(=0A=
s_isns||s_isopera){if(s_apv>=3D3){j=3D'1.1';v=3Ds_n.javaEnabled()?'Y':'N'=0A=
if(s_apv>=3D4){j=3D'1.2';c=3Dscreen.pixelDepth;bw=3Ds_wd.innerWidth;bh=3D=0A=
s_wd.innerHeight;if(s_apv>=3D4.06)j=3D'1.3'}}s_pl=3Ds_n.plugins}else if(=0A=
s_isie){if(s_apv>=3D4){v=3Ds_n.javaEnabled()?'Y':'N';j=3D'1.2';c=3D=0A=
screen.colorDepth;if(s_apv>=3D5){bw=3Ds_d.documentElement.offsetWidth;bh=3D=0A=
s_d.documentElement.offsetHeight;j=3D'1.3';if(!s_ismac&&s_d.body){=0A=
s_d.body.addBehavior("#default#homePage");hp=3Ds_d.body.isHomePage(tl)?=0A=
"Y":"N";s_d.body.addBehavior("#default#clientCaps");ct=3D=0A=
s_d.body.connectionType;if(iepl){s_pl=3Dnew Array;s_pt(iepl,',',s_iepf,=0A=
'');}}}}else r=3D'';if(!s_pl&&iepl)s_pl=3Ds_n.plugins}if(s_pl)while(pn<=0A=
s_pl.length&&pn<30){ps=3Ds_fl(s_pl[pn].name,100)+';';if(p.indexOf(ps)<0)=0A=
p+=3Dps;pn++}s_q=3D(g?'&g=3D'+s_ape(s_fl(g,255)):'')+(r?'&r=3D'+s_ape(s_f=
l(r,=0A=
255)):'')+(s?'&s=3D'+s_ape(s):'')+(c?'&c=3D'+s_ape(c):'')+(j?'&j=3D'+j:''=
)+(=0A=
v?'&v=3D'+v:'')+(k?'&k=3D'+k:'')+(bw?'&bw=3D'+bw:'')+(bh?'&bh=3D'+bh:'')+=
(ct?=0A=
'&ct=3D'+s_ape(ct):'')+(hp?'&hp=3D'+hp:'')+(s_vb?'&vb=3D'+s_vb:'')+(p?'&p=
=3D'=0A=
+s_ape(p):'')}if(s_gg('usePlugins'))s_wd.s_doPlugins();q+=3D(t?'&t=3D'=0A=
+s_ape(t):'')+s_hav();if(s_lnk||s_eo){var o=3Ds_eo?s_eo:s_lnk;if(!o)=0A=
return '';var =
p=3Ds_wd.s_g_pageName,w=3D1,t=3Ds_ot(o),n=3Ds_oid(o),x=3Do.s_oidt,=0A=
h,l,i,oc;if(s_eo&&o=3D=3Ds_eo){while(o&&!n&&t!=3D'BODY'){o=3Do.parentElem=
ent?=0A=
o.parentElement:o.parentNode;if(!o)return '';t=3Ds_ot(o);n=3Ds_oid(o);x=3D=0A=
o.s_oidt}oc=3Do.onclick?o.onclick.toString():'';if(oc.indexOf("s_gs(")>=3D=0A=
0)return =
''}ta=3Do.target;h=3Do.href?o.href:'';i=3Dh.indexOf('?');h=3Ds_gg(=0A=
'linkLeaveQueryString')||i<0?h:h.substring(0,i);l=3Ds_gg('linkName')?=0A=
s_gg('linkName'):s_ln(h);t=3Ds_gg('linkType')?s_gg('linkType'=0A=
).toLowerCase():s_lt(h);if(t&&(h||l))q+=3D'&pe=3Dlnk_'+(t=3D=3D'd'||t=3D=3D=
'e'?=0A=
s_ape(t):'o')+(h?'&pev1=3D'+s_ape(h):'')+(l?'&pev2=3D'+s_ape(l):'');else=0A=
trk=3D0;if(s_gg('trackInlineStats')){if(!p){p=3Ds_wd.location.href;w=3D0}=
p=3D=0A=
p?s_fl(p,255):'';t=3Ds_ot(o);i=3Do.sourceIndex;if(s_gg('objectID')){n=3D=0A=
s_gg('objectID');x=3D1;i=3D1}if(p&&n&&t)qs=3D'&pid=3D'+s_ape(p)+(w?'&pidt=
=3D'+w:=0A=
'')+'&oid=3D'+s_ape(n)+(x?'&oidt=3D'+x:'')+'&ot=3D'+s_ape(t)+(i?'&oi=3D'+=
i:'')=0A=
}s_wd.s_linkName=3Ds_wd.s_linkType=3Ds_wd.s_objectID=3Ds_lnk=3Ds_eo=3D'';=
if(=0A=
!s_wd.s_disableLegacyVars)s_wd.linkName=3Ds_wd.linkType=3Ds_wd.objectID=3D=
''=0A=
}if(!trk&&!qs)return '';var code=3D'';if(un){if(trk&&s_vs(un,sed))code+=3D=0A=
s_mr(un,sess,q+(qs?qs:s_rq(un)),ta);s_sq(un,trk?'':qs)}else if(=0A=
s_wd.s_unl)for(var unn=3D0;unn<s_wd.s_unl.length;unn++){un=3Ds_wd.s_unl[=0A=
unn];if(trk&&s_vs(un,sed))code+=3Ds_mr(un,sess,q+(qs?qs:s_rq(un)),ta)=0A=
s_sq(un,trk?'':qs)}return code}function s_dc(un){un=3Dun.toLowerCase()=0A=
var dyas=3Ds_gg('dynamicAccountSelection'),dyal=3Ds_gg(=0A=
'dynamicAccountList'),dyam=3Ds_gg('dynamicAccountMatch');if(dyas&&dyal)=0A=
un=3Ds_dyas(un,dyal,dyam);=0A=
s_wds(un);s_ca(un);return s_gs(un)}=0A=
=0A=
// ###################################################=0A=
// CODE CHANGE FOR FILE: PROTOCOL EXCLUSION 6/28/2005=0A=
// ###################################################=0A=
// OLD CODE:=0A=
// s_code=3Ds_dc(s_account);if(s_code)s_d.write(s_code)=0A=
// NEW CODE:=0A=
   if(s_isValid) {  s_code=3Ds_dc(s_account);if(s_code)s_d.write(s_code) =
}=0A=
// END CODE CHANGE=0A=

------=_NextPart_000_01F6_01C6830A.30DCB4C0--
