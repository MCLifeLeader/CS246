
   Wednesday, 17 May 2006

o  Randy King, Prayer and Thought

o  Note New Task! (Read about everyone...)

o  "Extra-Strength Methods and Using the Java Library" quiz

o  Answer Questions

   Q1. Should you "rm *.dbf" somewhere in your edit-compile-run-debug loop?
   A1. Yes, because a RandomAccessFile will not be recreated with a
       *smaller* size if it already exists with a big enough size.

   Q2. What is a lookup key?

   A2. It's a piece of data used to look up other data.

       For example, a Hashtable (map) holds key-value pairs.

       Give a Hashtable a key, it gives you a value.

       Database has lots of data (keys and values)

       System.getProperty("user.dir") is the System "database"
       lookup of value paired with the name "user.dir".

       You can define your own "System properties"!

       How? (-Dname=value on the java command line, right after "java")

   Q3. When is it good to have an all-static-methods class?

   A3. With a "utility" class (like System or Math).

o  Basic Object-Oriented Programming Organizing Principles

   BOOPOP #2

   If you have a class with only static methods,
   then it's probably not a good OO program.

o  The Interface Implementation Principle

   Say the FileToucher class were to implement the "public void run()"
   method.  But if it didn't SAY it implements Runnable (the interface
   that defines the no-argument, void-return-type run method) then it
   would NOT *BE* a true Runnable.  On the other hand, you can say
   your class implements Runnable, but unless you actually write a run
   method, it means precisely nothing.  Your class IS-A Runnable --
   NOT!  Actually, the compiler steps in to prevent your class from
   claiming to be a Runnable unless it actually IS a Runnable.  That
   is, that it really, truly provides a run method -- thus
   implementing the Runnable interface.

   The *Succinct* Interface Implementation Principle:

      To implement behavior, you must *say* that your class
      "implements" an interface, and then *mean* it!

o  /home/cs246/samplecode/FileToucher.java (version 1.3)

   A good example of a bad example of OOP!

   BOOPOP #3

      If you see a multi-way 'if' statement conditionalizing
      *behavior*, it's probably the sign of a NON-OO program!

      Q. What *is* the mechanism for conditionalizing behavior
         in an OO Program?

      A. Polymorphism!

	 Inheritance enables polymorphism --

	    Derivation is another name for inheritance.

   BOOPOP #4

      If you have a constructor, make it SMALL!

   BOOPOP #5

      If you have a main, make it SMALL!

      Q. Should you even have a main method?

      A. It depends.  Yes if it's a "main" class, i.e., meant to be the
         entry point for an application.  No if it's just meant to be
         used by other classes/objects.

================================================================
